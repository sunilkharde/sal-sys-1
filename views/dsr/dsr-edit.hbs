<div style="padding-right: 5px; padding-left: 5px;">
    <div class="row justify-content-center">
        <form id="dsrForm" onsubmit="return validateKmRange();"
            action="/dsr/update/{{momentYMD data.dsr_date}}/{{data.emp_id}}?postFlag={{postFlag}}" method="post">
            <div class="row mb-3">
                <label for="dsr_date" class="col-sm-3 col-form-label">Date</span></label>
                <div class="col-sm-9">
                    <input hidden type="text" class="form-control" id="postFlag" name="postFlag" value="{{postFlag}}">
                    <input hidden type="text" class="form-control" id="dsr_date" name="dsr_date"
                        value="{{momentYMD data.dsr_date}}" placeholder="DSR Date">
                    <input type="text" class="form-control" id="dsr_date_new" name="dsr_date_new"
                        value="{{momentDMY data.dsr_date}}" placeholder="DSR Date">
                </div>
            </div>
            <div class="row mb-3">
                <label for="emp_id" class="col-sm-3 col-form-label">EMP</span></label>
                <div class="col-sm-9">
                    <input hidden type="text" class="form-control" id="emp_id" name="emp_id" value="{{data.emp_id}}"
                        placeholder="EMP-ID">
                    <input readonly type="text" class="form-control" id="emp_name" name="emp_name"
                        value="{{data3.first_name}} {{data3.last_name}}" placeholder="EMP-Name">
                </div>
            </div>
            <div class="row mb-3">
                <label for="hq_name" class="col-sm-3 col-form-label">HQ</span></label>
                <div class="col-sm-9">
                    <input readonly type="text" class="form-control" id="hq_name" name="hq_name"
                        value="{{data3.hq_name}}" placeholder="HQ-Name">
                </div>
            </div>
            <div class="row mb-3">
                <label for="desg_name" class="col-sm-3 col-form-label">Desg</span></label>
                <div class="col-sm-9">
                    <input readonly type="text" class="form-control" id="desg_name" name="desg_name"
                        value="{{data3.desg_name}}" placeholder="Designation">
                    <input hidden type="text" class="form-control" id="desg_id" name="desg_id" value="{{data3.desg_id}}"
                        placeholder="desg_id">
                </div>
            </div>
            <div class="row mb-3">
                <label for="boss_name" class="col-sm-3 col-form-label">Boss</span></label>
                <div class="col-sm-9">
                    <input readonly type="text" class="form-control" id="boss_name" name="boss_name"
                        value="{{data3.boss_name}}" placeholder="HQ-Name">
                </div>
            </div>
            <div class="row mb-3">
                <label for="atten_flag" class="col-sm-3 col-form-label">Status<span style="color: red;">*</span></label>
                <div class="col-sm-9">
                    <select class="form-select" id="atten_flag" name="atten_flag" aria-label=".form-select-sm example">
                        <option value="XX" selected>(Select Status)</option>
                        {{#each atten_flag_list}}
                        <option value="{{this.atten_flag}}" {{#if (eq this.atten_flag
                            ../data.atten_flag)}}selected{{/if}}>
                            {{atten_desc}}</option>
                        {{/each}}
                    </select>
                </div>
            </div>
            <div class="row mb-3">
                <label for="from_city" class="col-sm-3 col-form-label">From<span style="color: red;">*</span></label>
                <div class="col-sm-9">
                    <input required type="text" class="form-control" id="from_city" name="from_city"
                        value="{{data.from_city}}">
                </div>
            </div>
            <div class="row mb-3">
                <label for="to_city" class="col-sm-3 col-form-label">To<span style="color: red;">*</span></label>
                <div class="col-sm-9">
                    <input required type="text" class="form-control" id="to_city" name="to_city"
                        value="{{data.to_city}}">
                </div>
            </div>
            <div class="row mb-3">
                <label for="stay_city" class="col-sm-3 col-form-label">Stay</label>
                <div class="col-sm-9">
                    <input type="text" class="form-control" id="stay_city" name="stay_city" value="{{data.stay_city}}">
                </div>
            </div>
            <div class="row mb-3">
                <label for="total_allow" class="col-sm-3 col-form-label">Total DA</label>
                <div class="col-sm-4">
                    <input readonly type="number" class="form-control text-end" id="total_allow" name="total_allow"
                        value="{{data.total_allow}}" min="0" step="1.00">
                </div>
            </div>
            <div class="row mb-3">
                <label for="total_lodge" class="col-sm-3 col-form-label">Lodging</label>
                <div class="col-sm-4">
                    <input {{#isEqual data.emp_id 1 2 }} {{else}}readonly{{/isEqual}} type="number"
                        class="form-control text-end" id="total_lodge" name="total_lodge" value="{{data.total_lodge}}"
                        min="0" step="1.00">
                </div>
            </div>
            <div class="row mb-3">
                <label for="total_exp" class="col-sm-3 col-form-label">Total Exp</label>
                <div class="col-sm-4">
                    <input readonly type="number" class="form-control text-end" id="total_exp" name="total_exp"
                        value="{{data.total_exp}}" min="0" step="1.00">
                </div>
            </div>

            <div class="mb-3">
                <br>
                <br>
                <label for="drs_dtTable" class="form-label"><strong>Expenses Details</strong></label>
                {{!-- <h1><strong>Expenses Details</strong></h1> --}}
                <table class="table" id="drs_dtTable">
                    <thead>
                        <tr>
                            <th hidden class="col-1">Sr</th>
                            <th class="col-5">Item</th>
                            <th class="col-1">Amount</th>
                            <th class="col-3 text-end">From Km</th>
                            <th class="col-3 text-end">To Km</th>
                            <th class="col-1">&nbsp;&nbsp;...</th>
                            {{!-- <th class="col-10">Temp</th> --}}
                        </tr>
                    </thead>
                    <tbody id="orderItemsBody">
                        {{#each [data2]}}
                        <tr>
                            <td hidden><input readonly type="text" class="form-control text-end" id="sr_no"
                                    name="sr_no[]" required value="{{this.sr_no}}">
                            </td>
                            <td>
                                <select class="form-select" id="allow_id" name="allow_id[]">
                                    <option value="">(Select)</option>
                                    {{#each ../allow_list}}
                                    <option value="{{this.allow_id}}" {{#isEqual ../this.allow_id
                                        this.allow_id}}selected{{/isEqual}}>
                                        {{this.allow_name}}</option>
                                    {{/each}}
                                </select>
                            </td>

                            <td><input {{#isEqual this.type "Fix" "PerKM" }}readonly{{/isEqual}} type="number"
                                    class="form-control text-end" id="amount" name="amount[]" min="0" step="1"
                                    value="{{this.amount}}" required>
                            </td>
                            <td><input {{#isEqual this.type "Actual" }}readonly{{/isEqual}} type="number"
                                    class="form-control text-end" id="from_km" name="from_km[]" min="1" step="1"
                                    value="{{this.from_km}}"></td>
                            <td><input {{#isEqual this.type "Actual" }}readonly{{/isEqual}} type="number"
                                    class="form-control text-end" id="to_km" name="to_km[]" min="1" step="1"
                                    value="{{this.to_km}}"></td>
                            <td>
                                <button type="button" id="removeItemBtn" onclick="removeSelectedItem(this)"
                                    class="btn btn-danger">
                                    <i class="bi bi-trash text-end"></i>
                                </button>
                            </td>
                            <td>
                                <div hidden>
                                    <input type="text" class="form-control" id="type" name="type[]"
                                        value="{{this.type}}">
                                    <input type="number" class="form-control text-end" id="km_rate" name="km_rate[]"
                                        value="{{this.km_rate}}">
                                </div>
                            </td>

                        </tr>
                        {{/each}}

                    </tbody>
                </table>

                <div class="form-group row">
                    <div class="col-sm-6">
                        <button type="button" id="addItemBtn" class="btn btn-success">Add
                            Item</button>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row">
                            <label for="totalAmount" class="col-sm-6 col-form-label text-end">Total:</label>
                            <div class="col-sm-6">
                                <input readonly type="text" class="form-control text-end" id="totalAmount"> &nbsp;&nbsp;
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <br>

            <div class="row">
                <div class="col-sm">
                    <button {{#isEqual user.user_role "Read" }} disabled {{/isEqual}} type="submit" id="submitBtn" class="btn btn-primary mx-1">Submit</button>

                    {{#if (eq postFlag 'Y')}}
                    <button type="button" class="btn btn-secondary mx-5"
                        onclick="window.location.href='/dsr/post-edit?selectedEmpID={{data.emp_id}}'">Cancel</button>
                    {{else}}
                    <button type="button" class="btn btn-secondary mx-5"
                        onclick="window.location.href='/dsr/view'">Cancel</button>
                    {{/if}}
                </div>
            </div>

        </form>
    </div>
</div>

<script>
    const dropdownAttenFlag = document.getElementById('atten_flag');
    const desgID = document.getElementById('desg_id').value;

    dropdownAttenFlag.addEventListener("change", async (event) => {
        try {
            const selectedAttenFlag = dropdownAttenFlag.value;

            const response = await fetch(`/dsr/dsr-da?desg_id=${desgID}&atten_flag=${selectedAttenFlag}`);
            const data = await response.json();
            const daAmount = data.allowDA ? data.allowDA.daRate : 0;
            const lodgeAmount = data.allowDA ? data.allowDA.lodgeRate : 0;

            document.getElementById("total_allow").value = daAmount.toFixed(0);
            document.getElementById("total_lodge").value = lodgeAmount.toFixed(0);

        } catch (error) {
            console.error(error);
        }
    });

</script>

<script>
    function updateRowFields(allowType, allowAmtVal, row, fromKm, toKm, kmRate) {
        if (allowType === 'Actual') {
            row.querySelector("#amount").readOnly = false;
            row.querySelector("#from_km").readOnly = true;
            row.querySelector("#to_km").readOnly = true;
            row.querySelector("#from_km").value = 0;
            row.querySelector("#to_km").value = 0;
        } else if (allowType === 'Fix') {
            row.querySelector("#amount").value = parseFloat(allowAmtVal).toFixed(0);
            row.querySelector("#amount").readOnly = true;
            row.querySelector("#from_km").readOnly = true;
            row.querySelector("#to_km").readOnly = true;
            row.querySelector("#from_km").value = 0;
            row.querySelector("#to_km").value = 0;
        } else if (allowType === 'PerKM') {
            if (isNaN(parseFloat(toKm)) || isNaN(parseFloat(fromKm)) || isNaN(parseFloat(kmRate))) {
                row.querySelector("#amount").value = 0;
            } else {
                row.querySelector("#amount").value = (parseFloat(toKm) - parseFloat(fromKm)) * parseFloat(kmRate);
            }
            row.querySelector("#amount").readOnly = true;
            row.querySelector("#from_km").readOnly = false;
            row.querySelector("#to_km").readOnly = false;
        }
    }

    const orderItemsBody = document.getElementById("orderItemsBody");
    const addItemBtn = document.getElementById("addItemBtn");

    // Add an event listener to the button to handle clicks
    addItemBtn.addEventListener("click", function () {
        // Get the last row in the table body
        const lastRow = orderItemsBody.lastElementChild;
        // Clone the last row
        const newRow = lastRow.cloneNode(true);
        // Clear the input fields in the new row
        const inputs = newRow.querySelectorAll("input");
        inputs.forEach(input => {
            input.value = "";
        });
        // Increment the serial number in the new row
        const srNoValue = parseInt(lastRow.querySelector("#sr_no").value);
        const srNoInput = newRow.querySelector("#sr_no");
        //const srNoValue = parseInt(srNoInput.value);
        srNoInput.value = srNoValue + 10;

        const allowInput = newRow.querySelector("#allow_id");
        allowInput.value = "";

        // Get the newly added amount field
        const amtInpute = newRow.querySelector('#amount');
        amtInpute.readOnly = true; //false;
        const fromKmInpute = newRow.querySelector('#from_km');
        fromKmInpute.readOnly = true;
        const toKmInpute = newRow.querySelector('#to_km');
        toKmInpute.readOnly = true;
        const kmRateInpute = newRow.querySelector('#km_rate');

        // Append the new row to the table body
        orderItemsBody.appendChild(newRow);

    });

    // Add a change event listener to the amount and from_km inputs
    orderItemsBody.addEventListener("change", async (event) => {
        const target = event.target;

        if (target.matches("#allow_id")) {
            const row = target.closest("tr");
            const allowID = row.querySelector("#allow_id").value;
            //const allowType = row.querySelector("#type");
            const fromKm = parseFloat(row.querySelector("#from_km").value);
            const toKm = parseFloat(row.querySelector("#to_km").value);
            //const kmRate = parseFloat(row.querySelector("#km_rate").value);

            //Get type/km_rate from allow pricelist
            const selectedAttenFlag = dropdownAttenFlag.value;
            const response = await fetch(`/dsr/dsr-ad?allow_id=${allowID}&desg_id=${desgID}&atten_flag=${selectedAttenFlag}`);
            const data = await response.json();
            const allowTypeVal = data.allowData ? data.allowData.type : 'Fix';
            const allowAmtVal = data.allowData ? data.allowData.amount : 0;
            const allowKmRateVal = data.allowData ? data.allowData.km_rate : 3;
            row.querySelector("#type").value = allowTypeVal;
            row.querySelector("#amount").value = parseFloat(allowAmtVal).toFixed(0);
            row.querySelector("#km_rate").value = parseFloat(allowKmRateVal).toFixed(0);

            updateRowFields(allowTypeVal, allowAmtVal, row, fromKm, toKm, allowKmRateVal);
        }

        if (target.matches("#allow_id, #amount, #from_km, #to_km")) {

            const row = target.closest("tr");
            const allowTypeVal = row.querySelector("#type").value;
            const allowAmtVal = parseFloat(row.querySelector("#amount").value);
            const fromKm = parseFloat(row.querySelector("#from_km").value);
            const toKm = parseFloat(row.querySelector("#to_km").value);
            const kmRate = parseFloat(row.querySelector("#km_rate").value);

            updateRowFields(allowTypeVal, allowAmtVal, row, fromKm, toKm, kmRate);

            // Calculate the total Amount
            const amountInputs = orderItemsBody.querySelectorAll("#amount");
            let totalAmount = 0;
            amountInputs.forEach((input) => {
                const inputValue = parseFloat(input.value);
                if (!isNaN(inputValue)) {
                    totalAmount += inputValue;
                }
            });
            document.getElementById("totalAmount").value = totalAmount.toFixed(2);
            document.getElementById("total_exp").value = totalAmount.toFixed(0);
        }

    });

    // Add a change event listener to calculate total amount when page load
    document.addEventListener("DOMContentLoaded", () => {
        const amountInputs = document.querySelectorAll("#drs_dtTable #amount");
        let totalAmount = 0;
        amountInputs.forEach((input) => {
            const inputValue = parseFloat(input.value);
            if (!isNaN(inputValue)) {
                totalAmount += inputValue;
            }
        });
        document.getElementById("totalAmount").value = totalAmount.toFixed(2);
        document.getElementById("total_exp").value = totalAmount.toFixed(0);
    });

    function removeSelectedItem(element) {
        // Remove the row from the table
        const row = element.closest("tr");
        if (row.rowIndex === 1) {
            alert("First row can't be delete!");
            return;
        }
        row.remove();
        // Recalculate the total Amount
        const amountInputs = orderItemsBody.querySelectorAll("#amount");
        let totalAmount = 0;
        amountInputs.forEach((input) => {
            const inputValue = parseFloat(input.value);
            if (!isNaN(inputValue)) {
                totalAmount += inputValue;
            }
        });
        document.getElementById("totalAmount").value = totalAmount.toFixed(2);
        document.getElementById("total_exp").value = totalAmount.toFixed(0);
    }

</script>

<script>
    function adjustFontSize() {
        var screenWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;

        var frmLabels = document.getElementsByClassName('col-form-label');
        for (var i = 0; i < frmLabels.length; i++) {
            var frmLabel = frmLabels[i];
            if (screenWidth < 768) {
                frmLabel.style.fontSize = '50px';
            } else if (screenWidth >= 768 && screenWidth < 1024) {
                frmLabel.style.fontSize = '50px';
            } else {
                frmLabel.style.fontSize = '30px';
            }
        }

        var frmLabels = document.getElementsByClassName('form-label');
        for (var i = 0; i < frmLabels.length; i++) {
            var frmLabel = frmLabels[i];
            if (screenWidth < 768) {
                frmLabel.style.fontSize = '50px';
            } else if (screenWidth >= 768 && screenWidth < 1024) {
                frmLabel.style.fontSize = '50px';
            } else {
                frmLabel.style.fontSize = '30px';
            }
        }

        var frmControls = document.getElementsByClassName('form-control');
        for (var i = 0; i < frmControls.length; i++) {
            var frmControl = frmControls[i];
            if (screenWidth < 768) {
                frmControl.style.fontSize = '50px';
            } else if (screenWidth >= 768 && screenWidth < 1024) {
                frmControl.style.fontSize = '50px';
            } else {
                frmControl.style.fontSize = '30px';
            }
        }

        var frmControls = document.getElementsByClassName('form-select');
        for (var i = 0; i < frmControls.length; i++) {
            var frmControl = frmControls[i];
            if (screenWidth < 768) {
                frmControl.style.fontSize = '50px';
            } else if (screenWidth >= 768 && screenWidth < 1024) {
                frmControl.style.fontSize = '50px';
            } else {
                frmControl.style.fontSize = '30px';
            }
        }

        var frmBtns = document.getElementsByClassName('btn');
        for (var i = 0; i < frmBtns.length; i++) {
            var frmBtn = frmBtns[i];
            if (screenWidth < 768) {
                frmBtn.style.fontSize = '50px';
            } else if (screenWidth >= 768 && screenWidth < 1024) {
                frmBtn.style.fontSize = '50px';
            } else {
                frmBtn.style.fontSize = '30px';
            }
        }

        var txtItems = document.getElementsByClassName('table');
        for (var i = 0; i < txtItems.length; i++) {
            var txtItem = txtItems[i];
            if (screenWidth < 768) {
                txtItem.style.fontSize = '41px';
            } else if (screenWidth >= 768 && screenWidth < 1024) {
                txtItem.style.fontSize = '41px';
            } else {
                txtItem.style.fontSize = '20px';
            }
        }

        var txtItems = document.getElementsByClassName('page-title');
        for (var i = 0; i < txtItems.length; i++) {
            var txtItem = txtItems[i];
            if (screenWidth < 768) {
                txtItem.style.fontSize = '60px';
            } else if (screenWidth >= 768 && screenWidth < 1024) {
                txtItem.style.fontSize = '60px';
            } else {
                txtItem.style.fontSize = '40px';
            }
        }

    }

    window.addEventListener('DOMContentLoaded', adjustFontSize);
    window.addEventListener('resize', adjustFontSize);
</script>

<script>
    function validateKmRange() {
        const fromKmInputs = document.getElementsByName('from_km[]');
        const toKmInputs = document.getElementsByName('to_km[]');
        const allowTypes = document.getElementsByName('type[]');

        for (let i = 0; i < fromKmInputs.length; i++) {
            const fromKm = parseFloat(fromKmInputs[i].value);
            const toKm = parseFloat(toKmInputs[i].value);
            const allowType = allowTypes[i].value;

            //console.log('fromKm... ', i, ' Type... ', allowTypes[i].value, ' ... ' , fromKmInputs[i].value, ' ... ', toKmInputs[i].value)

            if (allowType === 'PerKM') {
                if (isNaN(fromKm) || isNaN(toKm) || fromKm >= toKm) {
                    alert('The "To Km" value must be greater than the "From Km" value.');
                    return false;
                }
            }
        }

        return true;
    }
</script>