<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-10 border p-4"> {{!-- border-secondary --}}
            <h4 class="mb-3">Create Purchase Order</h4>
            <form id="poForm" action="/po/create" method="post">
                <div class="form-group row mb-3">
                    <label for="po_date" class="col-sm-2 col-form-label">PO Date</label>
                    <div class="col-sm-4">
                        <input readonly type="text" class="form-control" id="po_date" name="po_date"
                            value="{{momentDMY data.po_date}}">
                    </div>
                    <label for="po_no" class="col-sm-2 col-form-label">PO No</label>
                    <div class="col-sm-4">
                        <input readonly type="po_no" class="form-control" id="po_no" name="po_no"
                            value="{{data.po_no}}">
                    </div>
                </div>

                <div class="row mb-3">
                    <label for="customer_id" class="col-sm-2 col-form-label">Dealer Name<span
                            style="color: red;">*</span></label>
                    <div class="col-sm-10">
                        <div class="input-group">
                            <input hidden type="text" class="form-control" id="customer_id" name="customer_id"
                                value="{{data.customer_id}}">
                            <input disabled type="text" class="form-control" id="customer_name" name="customer_name"
                                value="{{data.customer_name}}">
                            <button class="btn btn-outline-info" type="button" id="btnCustomer" data-bs-toggle="modal"
                                data-bs-target="#customersModal">
                                <i class="bi bi-list"></i></button>
                        </div>
                    </div>
                </div>

                <div class="form-group row mb-3">
                    <label for="bu_id" class="col-sm-2 col-form-label">Business Unit<span
                            style="color: red;">*</span></label>
                    <div class="col-sm-4">
                        <input hidden type="text" class="form-control" id="bu_id_hdn" name="bu_id_hdn"
                            value="{{data.bu_id}}">
                        <input disabled type="text" class="form-control" id="bu_name" name="bu_name"
                            value="{{data.bu_name}}">

                        {{!-- <select class="form-select" id="bu_id" name="bu_id" aria-label=".form-select-sm example">
                            <option value="" selected>Select Business Unit</option>
                            {{#each bu_list}}
                            <option value="{{bu_id}}" {{#isEqual ../data.bu_id bu_id }}selected{{/isEqual}}>
                                {{bu_name}}
                            </option>
                            {{/each}}
                        </select> --}}
                    </div>

                    <label for="exp_date" class="col-sm-2 col-form-label">Expected Delivery<span
                            style="color: red;">*</span></label>
                    <div class="col-sm-4">
                        <input type="date" class="form-control" id="exp_date" name="exp_date"
                            value="{{momentYMD data.exp_date}}" min="{{momentYMD data.minDate}}"
                            max="{{momentYMD data.maxDate}}" required>
                    </div>
                </div>

                <div class="mb-3 border p-4">
                    <label for="orderItems" class="form-label"><strong>Order Items</strong></label>
                    <table class="table" id="po_dtTable">
                        <thead>
                            <tr>
                                <th class="col-1">Sr</th>
                                <th class="col-8">Product</th>
                                <th>Qty</th>
                                <th hidden>Rate</th>
                                <th hidden>Amount</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody id="orderItemsBody">
                            <tr>
                                <td><input readonly type="text" class="form-control text-end" id="sr_no" name="sr_no[]"
                                        required value="10"></td>
                                <td><select class="form-select" id="product_id" name="product_id[]"> {{!-- disabled --}}
                                        {{!-- <option value="">(Select a value)</option> --}}
                                </td>
                                <td><input type="number" class="form-control text-end" id="qty" name="qty[]" min="1"
                                        step="1" value="1" required>
                                </td>
                                <td hidden><input type="number" class="form-control text-end" id="rate" name="rate[]"
                                        min="0" step="1" value="1" required></td>
                                <td hidden><input readonly type="number" class="form-control text-end" id="amount"
                                        name="amount[]" min="0" step="1" required></td>
                                <td>
                                    <button type="button" id="removeItemBtn" onclick="removeSelectedItem(this)"
                                        class="btn btn-danger">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        </tbody>
                    </table>

                    <div class="form-group row">
                        <div class="col-sm-8">
                            <button type="button" id="addItemBtn" class="btn btn-success">Add Item</button>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group row">
                                <label for="totalAmount" class="col-sm-6 col-form-label text-end">Total: </label>
                                <div class="col-sm-6">
                                    <input readonly type="text" class="form-control text-end" id="totalAmount">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-3"> {{!--d-flex justify-content-between"> --}}
                    <button type="submit" id="submitBtn" class="btn btn-primary mx-1">Submit</button>
                    <button type="button" class="btn btn-secondary mx-1"
                        onclick="window.location.href='/po/view'">Cancel</button>
                </div>

            </form>
        </div>
    </div>
</div>

<script>
    const dropdownProductID = document.getElementById('product_id');
    dropdownProductID.addEventListener("click", async function () {
        await fillDropdownList(dropdownProductID);
    });

    async function fillDropdownList(dropdownList) {
        const bu_id = document.getElementById("bu_id_hdn");
        try {
            const response = await fetch(`/po/products-list?bu_id=${bu_id.value}`);
            const data = await response.json();
            const items = data.products_list;
            if (!Array.isArray(items)) {
                throw new Error('Unexpected response format');
            }
            dropdownList.innerHTML = '';
            items.forEach(item => {
                const option = document.createElement('option');
                option.value = item.product_id;
                option.textContent = item.product_name;
                dropdownList.appendChild(option);
            });
        } catch (error) {
            console.error(error);
        }
    }
</script>

<script>
    const btnCustomer = document.getElementById("btnCustomer");
    const orderItemsBody = document.getElementById("orderItemsBody");
    const addItemBtn = document.getElementById("addItemBtn");

    // Add an event listener to the button to handle clicks
    addItemBtn.addEventListener("click", function () {

        if (dropdownProductID.options.length < 1) {
            alert("There are no available products in the list. Please select firs row product fist.");
            return; 
        }

        btnCustomer.disabled = true;
        btnCustomer.className = "btn btn-outline-secondary";

        // Get the last row in the table body
        const lastRow = orderItemsBody.lastElementChild;
        // Clone the last row
        const newRow = lastRow.cloneNode(true);
        // Clear the input fields in the new row
        const inputs = newRow.querySelectorAll("input");
        inputs.forEach(input => {
            input.value = "";
        });
        // Increment the serial number in the new row
        const srNoValue = parseInt(lastRow.querySelector("#sr_no").value);
        const srNoInput = newRow.querySelector("#sr_no");
        //const srNoValue = parseInt(srNoInput.value);
        srNoInput.value = srNoValue + 10;

        // Get the newly added rate field
        const rateInpute = newRow.querySelector('#rate');
        rateInpute.value = 1;

        // Append the new row to the table body
        orderItemsBody.appendChild(newRow);
    });

    // Add a change event listener to the Qty and Rate inputs
    orderItemsBody.addEventListener("change", (event) => {
        const target = event.target;
        if (target.matches("#qty, #rate")) {
            // Calculate the Amount
            const row = target.closest("tr");
            const qty = parseFloat(row.querySelector("#qty").value);
            const rate = parseFloat(row.querySelector("#rate").value);
            const amount = qty * rate;
            row.querySelector("#amount").value = amount.toFixed(2);

            // Calculate the total Amount
            const amountInputs = orderItemsBody.querySelectorAll("#amount");
            let totalAmount = 0;
            amountInputs.forEach((input) => {
                totalAmount += parseFloat(input.value);
            });
            document.getElementById("totalAmount").value = totalAmount.toFixed(2);
        }
    });

    function removeSelectedItem(element) {

        // Remove the row from the table
        const row = element.closest("tr");
        if (row.rowIndex === 1) {
            alert("First row can't be delete!");
            return;
        }
        row.remove();
        // Recalculate the total Amount
        const amountInputs = orderItemsBody.querySelectorAll("#amount");
        let totalAmount = 0;
        amountInputs.forEach((input) => {
            totalAmount += parseFloat(input.value);
        });
        document.getElementById("totalAmount").value = totalAmount.toFixed(2);
    }

</script>


{{> _lov-customers}}