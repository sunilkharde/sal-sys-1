<br>
<div class="row">
    <div class="row justify-content-center">
        <div class="col-sm">
            <div class="card">
                <div class="card-header">
                    <h1 id="card-h1" class="card-title">Hi, {{data.first_name}} {{data.last_name}} </h1>
                    <input hidden type="text" id="emp_id" name="emp_id" value="{{data.emp_id}}">
                    <input hidden type="text" id="emp_name" name="emp_name"
                        value="{{data.first_name}} {{data.last_name}}">
                </div>
                <div class="card-body">
                    <h1 id="card-h2" class="card-title">Month :
                        {{data2.month_name}}-{{data2.year}}</h1>
                    <h1 id="card-h3" class="card-title">HQ : {{data.hq_name}}</h1>
                    <h1 id="card-h4" class="card-title">Designation : {{data.desg_name}}</h1>
                    {{!-- <br> --}}
                    <p class="card-text" style="font-style: oblique; color:blueviolet ;">Please mark your current
                        location and include a 'Selfie', which is necessary. Additionally, provide the odometer reading
                        of your car/bike if you are using one for traveling. You may also record your daily expenses for
                        the current month.</p>
                    {{!-- <br> --}}

                    {{!-- Employee Notification --}}
                    {{#if (eq showNote 'Y' )}}
                    <P style="font-size: 40px; color: rgb(6, 124, 28);">Could you please kindly re-enter your
                        expenses for the
                        following dates? It appears that the data was not properly saved, and we would greatly
                        appreciate your cooperation in resubmitting the information. Thank you!</p>
                    <br>
                    <P style="font-size: 40px; color: rgb(6, 124, 28);">कृपया खालील तारखांसाठी तुम्ही तुमचा खर्च
                        पुन्हा टाका. असे दिसते की सादर तारखांना तपशील योग्य प्रकारे जतन केला गेला नाही.
                        खालील थोड्याशा तारखांना माहिती पुन्हा सबमिट करण्यासाठी तुमच्या सहकार्याची प्रशंसा करतो.
                        धन्यवाद!</P>
                    <div class="border p-4">
                        <table class="table" id="NoteTable" style="font-size: 40px; color: rgb(3, 178, 35);">
                            <thead>
                                <tr>
                                    <th hidden>Date</th>
                                    <th>Date</th>
                                    <th class="text-end">Diff. Amount</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each dataNote}}
                                <tr>
                                    <td hidden>{{momentYMD this.dsr_date}}</td>
                                    <td>{{momentDMY this.dsr_date}}</td>
                                    <td class="text-end">{{this.total_exp}}</td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                    <br>
                    {{/if}}

                    <div hidden class="row">
                        <div class="col-sm d-flex align-items-end">
                            <button hidden id="initialize-camera-btn" class="btn btn-outline-primary btn-sm mb-1">
                                <i id="bi-camera" class="bi bi-camera"></i>
                                &nbsp;Get Photo...
                            </button>
                        </div>
                    </div>

                    <div class="row justify-content-center">
                        <div class="col-sm p-2 d-flex justify-content-center align-items-center">
                            <canvas id="canvas1" style="display:none; border: 2px solid brown;"></canvas>
                            <canvas id="canvas2" style="display:none; border: 2px solid brown;"></canvas>
                            <canvas id="canvas3" style="display:none; border: 2px solid brown;"></canvas>
                            <video autoplay id="camera-preview"
                                style="display: block; border: 2px solid green;"></video>
                            {{!-- height:auto; <widt>h: 500px; max-width: 500px; --}}
                        </div>
                    </div>

                    <div class="col-sm" style="margin-left: 40px; margin-right: 20px;margin-bottom: 20px">
                        <div class="form-check form-check-inline">
                            <input checked class="form-check-input font-size" type="radio" name="camera-selection"
                                id="inlineRadio1" value="user">
                            <label class="form-check-label font-size" for="inlineRadio1">Front Camera</label>
                        </div>
                        <div class="form-check form-check-inline" style="margin-left: 30px;">
                            <input class="form-check-input font-size" type="radio" name="camera-selection"
                                id="inlineRadio2" value="environment">
                            <label class="form-check-label font-size" for="inlineRadio2">Back Camera</label>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-sm d-flex align-items-center mb-2">
                            <canvas id="canvas1x" class="tm-5" height="80" width="100"
                                style="border: 2px solid rgb(112, 100, 100);"></canvas>
                            &nbsp;<button id="capture-btn1" class="btn btn-info btn-sm mb-1" style="display: none;"><i
                                    class="bi bi-person-circle"></i>&nbsp;Selfie<span
                                    style="color: red;">*</span>&nbsp;</button>
                            &nbsp;&nbsp;&nbsp;<canvas id="canvas2x" class="tm-5" height="80" width="100"
                                style="border: 2px solid rgb(112, 100, 100);"></canvas>
                            &nbsp;&nbsp;<button id="capture-btn2" class="btn btn-info btn-sm mb-1"
                                style="display: none;"><i class="bi bi-speedometer"></i>&nbsp;Meter&nbsp;</button>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-sm d-flex align-items-center mb-3">
                            <canvas id="canvas3x" class="tm-5" width="100" height="80"
                                style="border: 2px solid rgb(112, 100, 100);"></canvas>
                            &nbsp;<button id="capture-btn3" class="btn btn-info btn-sm mb-1" style="display: none;"><i
                                    class="bi bi-receipt"></i>&nbsp;Invoice Photo&nbsp;</button>
                        </div>
                    </div>

                    <div hidden class="row">
                        <div class="col-sm">
                            <button id="send-images-btn" class="btn btn-outline-primary btn-sm mb-1"
                                style="display: none;">Send Images</button>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-sm d-flex">
                            <button type="button" id="getLocationButton" class="btn btn-success btn-sm mb-1">
                                <i id="bi-geo" class="bi bi-geo-alt"></i>&nbsp;Save My Location...&nbsp;&nbsp;&nbsp;
                                <span style="display: block; font-size: 20px; color:rgb(190, 190, 190);">Don't capture
                                    locations
                                    rapidly.</span>
                            </button>
                            <input hidden type="datetime-local" class="form-control" id="toDate" name="toDate"
                                value="{{toDate}}"> {{!-- momentDMYHm --}}
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-sm">
                            <a id="placeName" style="font-size: 40px; color: rgb(3, 178, 35);"></a>
                            &nbsp;&nbsp;<a id="placeLatLng" style="font-size: 30px; color: rgb(3, 178, 35);"></a>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-sm">
                            <a id="emp_route" style="font-size: 30px; color:blueviolet ;">{{locNames}}</a>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm">
                            <div id="map" style="height: 600px;"> </div>
                        </div>
                    </div>
                    <br>

                    <div class="row">
                        <div class="col-sm">
                            <a href="/dsr/view" class="btn btn-primary btn-lg mx-1">Continue... </a>
                            <a href="/" class="btn btn-secondary btn-lg mx-5">Cancel </a>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .font-size {
        font-size: 40px;
    }
</style>

<script>
    function adjustFontSize() {
        var screenWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;

        var CardH1 = document.getElementById('card-h1');
        var CardH2 = document.getElementById('card-h2');
        var CardH3 = document.getElementById('card-h3');
        var CardH4 = document.getElementById('card-h4');
        if (screenWidth < 768) {
            CardH1.style.fontSize = '60px';
            CardH2.style.fontSize = '50px';
            CardH3.style.fontSize = '45px';
            CardH4.style.fontSize = '45px';
        } else if (screenWidth >= 768 && screenWidth < 1024) {
            CardH1.style.fontSize = '60px';
            CardH2.style.fontSize = '50px';
            CardH3.style.fontSize = '45px';
            CardH4.style.fontSize = '45px';
        } else {
            CardH1.style.fontSize = '45px';
            CardH2.style.fontSize = '35px';
            CardH3.style.fontSize = '30px';
            CardH4.style.fontSize = '30px';
        }

        /* var CardTitles = document.getElementsByClassName('card-title');
        for (var i = 0; i < CardTitles.length; i++) {
            var CardTitle = CardTitles[i];
            if (screenWidth < 768) {
                CardTitle.style.fontSize = '50px';
            } else if (screenWidth >= 768 && screenWidth < 1024) {
                CardTitle.style.fontSize = '50px';
            } else {
                CardTitle.style.fontSize = '30px';
            }
        } */

        var CardTexts = document.getElementsByClassName('card-text');
        for (var i = 0; i < CardTexts.length; i++) {
            var CardText = CardTexts[i];
            if (screenWidth < 768) {
                CardText.style.fontSize = '40px';
            } else if (screenWidth >= 768 && screenWidth < 1024) {
                CardText.style.fontSize = '35px';
            } else {
                CardText.style.fontSize = '30px';
            }
        }

        var frmBtns = document.getElementsByClassName('btn');
        for (var i = 0; i < frmBtns.length; i++) {
            var frmBtn = frmBtns[i];
            if (screenWidth < 768) {
                frmBtn.style.fontSize = '50px';
            } else if (screenWidth >= 768 && screenWidth < 1024) {
                frmBtn.style.fontSize = '50px';
            } else {
                frmBtn.style.fontSize = '35px';
            }
        }

        var txtItems = document.getElementsByClassName('page-title');
        for (var i = 0; i < txtItems.length; i++) {
            var txtItem = txtItems[i];
            if (screenWidth < 768) {
                txtItem.style.fontSize = '60px';
            } else if (screenWidth >= 768 && screenWidth < 1024) {
                txtItem.style.fontSize = '60px';
            } else {
                txtItem.style.fontSize = '42px';
            }
        }

    }

    window.addEventListener('DOMContentLoaded', adjustFontSize);
    window.addEventListener('resize', adjustFontSize);
</script>

<script>
    const videoElement = document.getElementById('camera-preview');

    const canvas1 = document.getElementById('canvas1');
    const canvas2 = document.getElementById('canvas2');
    const canvas3 = document.getElementById('canvas3');
    const canvas1x = document.getElementById('canvas1x');
    const canvas2x = document.getElementById('canvas2x');
    const canvas3x = document.getElementById('canvas3x');
    //const initializeCameraButton = document.getElementById('initialize-camera-btn');
    const radioButtons = document.querySelectorAll('input[name="camera-selection"]');
    const captureButton1 = document.getElementById('capture-btn1');
    const captureButton2 = document.getElementById('capture-btn2');
    const captureButton3 = document.getElementById('capture-btn3');
    //const sendImagesButton = document.getElementById('send-images-btn');
    let stream;
    let selectedCamera = 'user' //'user'; // Default to front camera  //'environment
    let canvas1Captured = false;
    let canvas2Captured = false;
    let canvas3Captured = false;

    window.addEventListener('DOMContentLoaded', function () {
        async function initializeCamera() {
            try {
                if (stream) {
                    stream.getTracks().forEach(track => track.stop());
                    //console.log('Stream stoped....')
                }
                //stream = await navigator.mediaDevices.getUserMedia({ video: true });
                stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: selectedCamera } });
                videoElement.srcObject = stream;
                videoElement.style.display = 'block';
                if (selectedCamera === 'user') {
                    videoElement.style.width = '500px';
                    //videoElement.style.height = '400px';
                } else {
                    videoElement.style.width = '800px';
                    //videoElement.style.height = '600px';
                }
                captureButton1.style.display = 'inline-block';
                captureButton2.style.display = 'inline-block';
                captureButton3.style.display = 'inline-block';
                //sendImagesButton.style.display = 'inline-block';
                //console.log('Camera Mode is....', selectedCamera)
            } catch (error) {
                console.error('Error accessing camera:', error);
            }
        }
        initializeCamera(); // Call initializeCamera() when DOM content is loaded.

        radioButtons.forEach(radioButton => {
            radioButton.addEventListener('change', () => {
                selectedCamera = radioButton.value === 'user' ? 'user' : 'environment';
                initializeCamera();
            });
        });

    });

    captureButton1.addEventListener('click', () => {
        canvas1Captured = true;
        //
        const context1 = canvas1.getContext('2d');
        canvas1.width = videoElement.clientWidth / 6;
        canvas1.height = videoElement.clientHeight / 6;
        context1.drawImage(videoElement, 0, 0, canvas1.width, canvas1.height);
        //
        const context1x = canvas1x.getContext('2d');
        canvas1x.width = 90; 
        canvas1x.height = 80; 
        context1x.drawImage(videoElement, 0, 0, canvas1x.width, canvas1x.height);
    });

    captureButton2.addEventListener('click', () => {
        canvas2Captured = true;
        //
        const context2 = canvas2.getContext('2d');
        canvas2.width = videoElement.clientWidth / 3;
        canvas2.height = videoElement.clientHeight / 3;
        context2.drawImage(videoElement, 0, 0, canvas2.width, canvas2.height);
        //
        const context2x = canvas2x.getContext('2d');
        canvas2x.width = 90; 
        canvas2x.height = 80; 
        context2x.drawImage(videoElement, 0, 0, canvas2x.width, canvas2x.height);
    });

    captureButton3.addEventListener('click', () => {
        canvas3Captured = true;
        //
        const context3 = canvas3.getContext('2d');
        canvas3.width = videoElement.clientWidth;
        canvas3.height = videoElement.clientHeight;
        context3.drawImage(videoElement, 0, 0, canvas3.width, canvas3.height);
        //
        const context3x = canvas3x.getContext('2d');
        canvas3x.width = 90; 
        canvas3x.height = 80; 
        context3x.drawImage(videoElement, 0, 0, canvas3x.width, canvas3x.height);
    });

    /*
        sendImagesButton.addEventListener('click', async () => {
            const dataURL1 = canvas1.toDataURL('image/jpeg', 0.8);
            const dataURL2 = canvas2.toDataURL('image/jpeg', 0.8);
            if (canvas1Captured === false) {
                console.error('No image captured for canvas1');
                alert('No image captured for canvas1');
                return;
            }
            try {
                const response = await fetch('/dsr/uploadSelfie', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', },
                    body: JSON.stringify({ dataURL1: dataURL1, dataURL2: dataURL2 }),
                });
    
                if (response.ok) {
                    console.log('Images uploaded successfully');
                } else {
                    console.error('Failed to upload images');
                }
            } catch (error) {
                console.error('Error uploading images:', error);
            }
        });
    */

</script>

<script>
    let locLat = "";
    let locLng = "";
    let locName = "";
    let locAdd = "";
    let saveLocFlag = "";

    function initMap() {

        const map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 19.565143, lng: 74.206182 },
            zoom: 12,
        });

        const getLocationButton = document.getElementById('getLocationButton');
        const placeName = document.getElementById('placeName');
        const empName = document.getElementById('emp_name').value;

        getLocationButton.addEventListener('click', () => {
            const toDateValue = document.getElementById("toDate").value;
            const toDate = new Date(toDateValue);
            const now = new Date();
            const timeDifference = now - toDate;
            const minutesDifference = Math.floor(timeDifference / (1000 * 60));

            //console.log('time..... ', now , '   ', toDate);
            //console.log('Minuter difference ', minutesDifference);

            if (minutesDifference < 10) {
                const minDiff = 10 - minutesDifference;
                alert(`Don't capture location rapidly. Please try again after ${minDiff} minutes.`);
                return;
            }

            if (canvas1Captured === false) {
                console.error('No image captured for Selfie. Please capture your selfie.');
                alert('No image captured for Selfie. Please capture your selfie.');
                return;
            }

            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    async (position) => {
                        const userLocation = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude,
                        };

                        // Place a marker at the user's location on the map
                        new google.maps.Marker({
                            position: userLocation,
                            map: map,
                            title: empName,
                            //label: empName,
                            label: {
                                text: empName,
                                fontWeight: 'bold', // Make the label text bold
                                fontSize: '20px',   // Change the font size
                                color: 'magenta',
                            }
                        });

                        //console.log('Emp ', empName)

                        // Center the map on the user's location
                        map.setCenter(userLocation);

                        placeLatLng.textContent = ""//`Lat-Lon: ${userLocation.lat.toFixed(2)}-${userLocation.lng.toFixed(2)}`;
                        locLat = userLocation.lat.toFixed(6); // Store with 6 decimal places
                        locLng = userLocation.lng.toFixed(6); // Store with 6 decimal places

                        // Get place name using reverse geocoding
                        const geocoder = new google.maps.Geocoder();
                        const latlng = new google.maps.LatLng(userLocation.lat, userLocation.lng);
                        //const latlng = new google.maps.LatLng(19.51718, 74.19813);
                        //const latlng = new google.maps.LatLng(40.712776, -74.005974);

                        try {
                            const response = await geocoder.geocode({ location: latlng });

                            if (response.results && response.results.length > 0) {
                                const firstResult = response.results[0];
                                let cityName = 'City name not found.';

                                for (const component of firstResult.address_components) {
                                    if (component.types.includes('locality')) {
                                        cityName = component.long_name;
                                        break;
                                    }
                                }

                                //placeName.textContent = `City Name: ${cityName}`;
                                placeName.textContent = `Location: ${firstResult.formatted_address}`;
                                locName = cityName;
                                locAdd = firstResult.formatted_address;
                            } else {
                                placeName.textContent = 'No results found.';
                            }
                        } catch (error) {
                            console.error('Geocoding error:', error);
                            placeName.textContent = 'Error fetching city name.';
                        }

                        //showConfirmationDialog();
                        const confirmed = confirm('Are you sure you want to save the location data?');
                        if (confirmed) {
                            saveLocFlag = 'Y';
                        }
                        else { saveLocFlag = 'N'; }

                        const imgURL1 = canvas1Captured === true ? canvas1.toDataURL('image/jpeg', 0.9) : null;
                        const imgURL2 = canvas2Captured === true ? canvas2.toDataURL('image/jpeg', 0.9) : null;
                        const imgURL3 = canvas3Captured === true ? canvas3.toDataURL('image/jpeg', 0.9) : null;
                        saveLocationData(imgURL1, imgURL2, imgURL3); //saveLocationData();
                    },
                    (error) => {
                        console.error(error);
                        alert('Location is not enabled on your mobile device. Please enable location services.');
                    }
                );
            } else {
                console.error('Geolocation is not supported by this browser.');
            }
        });

    }

    async function saveLocationData(dataURL1, dataURL2, dataURL3) {
        const empID = document.getElementById('emp_id').value;
        try {
            const response = await fetch('/dsr/save-location', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ empID, locLat, locLng, locName, locAdd, saveLocFlag, dataURL1, dataURL2, dataURL3 })
            });

            if (response.ok) {
                //alert('Location updated successfully');
                const locNames = await response.json();
                const locNameList = locNames.locNames ? locNames.locNames : '';
                document.getElementById("emp_route").textContent = locNameList;
                document.getElementById("toDate").value = locNames.toDate;

                // Clear the content of context1 and context2
                const context1 = canvas1.getContext('2d');
                const context2 = canvas2.getContext('2d');
                const context3 = canvas3.getContext('2d');
                context1.clearRect(0, 0, canvas1.width, canvas1.height);
                context2.clearRect(0, 0, canvas2.width, canvas2.height);
                context3.clearRect(0, 0, canvas3.width, canvas3.height);

                const context1x = canvas1x.getContext('2d');
                const context2x = canvas2x.getContext('2d');
                const context3x = canvas3x.getContext('2d');
                context1x.clearRect(0, 0, canvas1x.width, canvas1x.height);
                context2x.clearRect(0, 0, canvas2x.width, canvas2x.height);
                context3x.clearRect(0, 0, canvas3x.width, canvas3x.height);

                canvas1Captured = false;
                canvas2Captured = false;
                canvas3Captured = false;

            } else {
                alert('Failed to save location data. Please try again after 15 minutes.');
            }
        } catch (err) {
            console.error(err);
        }
    }

</script>

<script async defer src="https://maps.googleapis.com/maps/api/js?key={{googleApiKey}}&callback=initMap">
</script>