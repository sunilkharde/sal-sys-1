<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-10 border p-4"> {{!-- border-secondary --}}
            <h4 class="mb-3">VAN Claim Entry</h4>
            <form action="/vanClaim/update/{{data.customer_id}}/{{data.claim_month}}" method="post">

                <div class="row mb-3">
                    <label for="customer_id" class="col-sm-2 col-form-label">Vendor Name<span
                            style="color: red;">*</span></label>
                    <div class="col-sm-10">
                        <div class="input-group">
                            <input hidden type="text" class="form-control" id="customer_id" name="customer_id"
                                value="{{data.customer_id}}">
                            <input readonly type="text" class="form-control" id="customer_name" name="customer_name"
                                value="{{data.customer_name}}">
                            <button disabled class="btn btn-outline-secondary" type="button" id="btnVendor" data-bs-toggle="modal"
                                data-bs-target="#vendorModal">
                                <i class="bi bi-list"></i></button>
                        </div>
                    </div>
                </div>

                <div class="form-group row mb-3">
                    <label for="claim_month" class="col-sm-2 col-form-label">Month</label>
                    <div class="col-sm-4">
                        <input readonly type="month" class="form-control" id="claim_month" name="claim_month"
                            value={{data.claim_month}}>
                    </div>
                </div>

                {{!-- Exp details --}}
                <div class="mb-3 border p-4" style="overflow:auto">
                    <label for="VAN Expenses" class="form-label"><strong>VAN Expenses</strong></label>
                    <table class="table" id="vanExpTable">
                        <thead>
                            <tr>
                                <th style="width:800px;">Sr</th>
                                <th style="width:25px;">Expenses Date</th>
                                <th style="width:25px;">Vehicle No</th>
                                <th style="width:550px;">Work Area</th>
                                <th style="width:12px;">From KM</th>
                                <th style="width:5px;">To KM</th>
                                <th style="width:5px;">Diesel Ltr</th>
                                <th style="width:5px;">Diesel Amount</th>
                                <th style="width:5px;">Driver Rent</th>
                                <th style="width:5px;">Vehicle Rent</th>
                                <th style="width:5px;">Emp Name</th>
                                <th hidden style="width:5px;">Other Amount</th>
                            </tr>
                        </thead>
                        <tbody id="vanExpBody">
                            {{#each [expData]}}
                            <tr>
                                <td><input readonly type="text" class="form-control text-end" id="sr_no"
                                        style="width: 40px;" name="sr_no[]" required value="{{this.sr_no}}"></td>
                                <td><input type="date" class="form-control text-start" id="exp_date" name="exp_date[]"
                                        style="width:150px" value="{{momentYMD this.exp_date}}" required> </td>
                                {{!-- <td><button class="btn btn-outline-info" type="button" id="btnRent"
                                        data-bs-toggle="modal">Fill </button></td> --}}
                                <td><select class="form-select" id="veh_no" name="veh_no[]" style="width: 150px;">
                                        {{#each ../vehList}}
                                        <option value="{{this.veh_no}}" {{#isEqual ../this.veh_no
                                            this.veh_no}}selected{{/isEqual}}>{{this.veh_no}} </option>
                                        {{/each}}
                                    </select> </td>
                                <td><input type="text" class="form-control text-start text-uppercase" id="work_area[]"
                                        style="width:200px" name="work_area[]" maxlength="60" value={{this.work_area}}>
                                </td>
                                <td><input type="number" class="form-control text-end" id="from_km" name="from_km[]"
                                        style="width:70px" maxlength="10" value={{this.from_km}}></td>
                                <td><input type="number" class="form-control text-end" id="to_km" name="to_km[]"
                                        style="width:70px" maxlength="10" value={{this.to_km}}></td>
                                <td><input type="number" class="form-control text-end" id="diesel_ltr"
                                        name="diesel_ltr[]" style="width:70px" maxlength="10" value={{this.diesel_ltr}}>
                                </td>
                                <td><input type="number" class="form-control text-end" id="diesel_amt"
                                        name="diesel_amt[]" style="width:70px" maxlength="10" value={{this.diesel_amt}}>
                                </td>
                                <td><input readonly type="number" class="form-control" id="driver_rent"
                                        name="driver_rent[]" style="width:70px; text-align: right;" maxlength="10"
                                        value={{this.driver_rent}}></td>
                                <td><input readonly  type="number" class="form-control" id="veh_rent" name="veh_rent[]"
                                        style="width:70px; text-align: right;" maxlength="60" value={{this.veh_rent}}></td>
                                <td><select class="form-select" id="sp_name" name="sp_name[]" style="width: 200px;">
                                        {{#each ../spList}}
                                        <option value="{{this.sp_name}}" {{#isEqual ../this.sp_name
                                            this.sp_name}}selected{{/isEqual}}>{{this.sp_name}} </option>
                                        {{/each}}
                                    </select> </td>
                                <td><input hidden type="number" class="form-control text-start" id="other_amt"
                                        name="other_amt[]" style="width:70px" maxlength="10" value={{this.other_amt}}>
                                </td>
                                <td><button type="button" id="removeItemBtn" onclick="removeSelectedItem(this)"
                                        class="btn btn-danger"><i class="bi bi-trash"></i> </button> </td>
                            </tr>
                            {{/each}}
                        </tbody>
                    </table>
                    <div class="form-group row">
                        <div class="col-sm-8">
                            <button type="button" id="btnAddvanExp" class="btn btn-success">Add Entry</button>
                        </div>

                    </div>
                </div>

                {{!-- Saleman Details --}}
                <div class="mb-3 border p-4" style="overflow:auto">
                    <label for="vanItem_table" class="form-label"><strong>Item Information</strong></label>
                    <table class="table" id="vanItemTable">
                        <thead>
                            <tr>
                                <th style="width:7%;">Sr</th>
                                <th style="width:28%;">Exp Date</th>
                                <th style="width:60%;">Item Group</th>
                                <th style="width:20%;">Item Qty</th>
                                <th style="width:20%;">Item Value</th>
                                <th style="width:5%;">Action</th>
                            </tr>
                        </thead>

                        <tbody id="tableBodyvanItem">
                            {{#each [itemData]}}
                            <tr>
                                <td><input readonly type="text" class="form-control text-end" id="sr_no_item"
                                        name="sr_no_item[]" required value="{{this.sr_no_item}}"></td>
                                <td><input type="date" class="form-control text-start" id="exp_date_item"
                                        name="exp_date_item[]" style="width:150px" maxlength="20"
                                        value="{{momentYMD this.exp_date_item}}" required> </td>

                                <td style="display: flex; align-items: center;">
                                    <select class="form-select" width id="category_id" name="category_id[]"
                                        style="width: 250px;">
                                        {{#each ../[categoryList]}}
                                        <option value="{{this.category_id}}" {{#isEqual ../this.category_id
                                            this.category_id}} selected {{/isEqual}}>{{this.category_name}} </option>
                                        {{/each}}
                                </td>

                                <td><input type="number" class="form-control text-end" id="item_qty" name="item_qty[]"
                                        style="width:100px" maxlength="10" value={{this.item_qty}}> </td>
                                <td><input type="number" class="form-control text-end" id="item_value"
                                        name="item_value[]]" style="width:100px" maxlength="10"
                                        value={{this.item_value}}> </td>
                                <td><button type="button" id="removeSpBtn" onclick="removeSelectedItem(this)"
                                        class="btn btn-danger"> <i class="bi bi-trash"></i> </button> </td>
                            </tr>
                            {{/each}}
                        </tbody>
                    </table>

                    <div class="form-group row">
                        <div class="col-sm-8">
                            <button type="button" id="btnAddItem" class="btn btn-success">Add Product</button>
                        </div>
                    </div>

                </div>

                <div class="col-md-3 d-flex justify-content-between">
                    <button type="submit" class="btn btn-primary mx-1">Submit</button>
                    <div class="col-sm-10">
                        <button type="button" class="btn btn-secondary mx-1"
                            onclick="window.location.href='/vanclaim/view'">Cancel</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        $('#vanExpTable').dataTable(
            { pageLength: 10, responsive: true, }
        );
    });

    $(document).ready(function () {
        $('#vanItemTable').dataTable(
            { pageLength: 10, responsive: true, }
        );
    });
</script>

<script> 
        function updateDateRestrictions() {
        var claimMonthInput = document.getElementById("claim_month");
        var expDateInputs = document.querySelectorAll("input[name='exp_date[]']");
        var expItemDateInputs = document.querySelectorAll("input[name='exp_date_item[]']");

        if (claimMonthInput && expDateInputs) {
            var claimMonthValue = claimMonthInput.value;

            // Calculate the minimum and maximum dates based on claim_month
            var claimMonthYear = claimMonthValue.substring(0, 4);
            var claimMonthMonth = claimMonthValue.substring(5, 7);
            var lastDayOfMonth = new Date(claimMonthYear, claimMonthMonth, 0).getDate();

            var minDate = claimMonthValue + "-01";
            var maxDate = claimMonthValue + "-" + lastDayOfMonth;

            // Set the min and max attributes for each exp_date input
            expDateInputs.forEach(function (input) {
                input.min = minDate;
               input.max = maxDate;
            });
        }
        
        if (claimMonthInput && expItemDateInputs) {
            var claimMonthValue = claimMonthInput.value;

            // Calculate the minimum and maximum dates based on claim_month
            var claimMonthYear = claimMonthValue.substring(0, 4);
            var claimMonthMonth = claimMonthValue.substring(5, 7);
            var lastDayOfMonth = new Date(claimMonthYear, claimMonthMonth, 0).getDate();

            var minDate = claimMonthValue + "-01";
            var maxDate = claimMonthValue + "-" + lastDayOfMonth;

            // Set the min and max attributes for each exp_date input
            expItemDateInputs.forEach(function (input) {
                input.min = minDate;
               input.max = maxDate;
            });
        }

    }

    // Call the function when the page loads
    window.onload = function () {
        updateDateRestrictions();
    };

    // Add an event listener to the claim_month input to call the function when it changes
    var claimMonthInput = document.getElementById("claim_month");
    if (claimMonthInput) {
        claimMonthInput.addEventListener("change", updateDateRestrictions);
    }


</script>



<script>
    const tvanExpBody = document.getElementById("vanExpBody");
    const btnAddVanExp = document.getElementById("btnAddvanExp");

    btnAddVanExp.addEventListener("click", function () {
        // Get the last row in the table body
        const lastRow = tvanExpBody.lastElementChild;
        // Clone the last row
        const newRow = lastRow.cloneNode(true);
        // Clear the input fields in the new row
        const inputs = newRow.querySelectorAll("input");
        inputs.forEach(input => { input.value = ""; });
        // Increment the serial number in the new row
        const srNoExpValue = parseInt(lastRow.querySelector("#sr_no").value);
        const srNoExpInput = newRow.querySelector("#sr_no");
        //const srNoValue = parseInt(srNoInput.value);
        srNoExpInput.value = srNoExpValue + 1;

        // Copy the veh_rent value from the previous row
        const vehRentInput = newRow.querySelector("#veh_rent");
        const prevVehRentInput = lastRow.querySelector("#veh_rent");
        vehRentInput.value = prevVehRentInput.value;

        // Copy the driver_rent value from the previous row
        const driverRentInput = newRow.querySelector("#driver_rent");
        const prevdriverRentInput = lastRow.querySelector("#driver_rent");
        driverRentInput.value = prevdriverRentInput.value;

        // Copy the Emp Name value from the previous row
        const empNameInput = newRow.querySelector("#sp_name");
        const prevempNameInput = lastRow.querySelector("#sp_name");
        empNameInput.value = prevempNameInput.value;

        // Copy the Veh No value from the previous row
        // const vehNoInput = newRow.querySelector("#veh_no");
        // const prevvehNoInput = lastRow.querySelector("#veh_no");
        // vehNoInput.value = prevvehNoInput.value; 


        // Get the newly added rate field
        // Append the new row to the table body
        tvanExpBody.appendChild(newRow);
        updateDateRange();


    });

    function removeSelectedItem(element) {
        const row = element.closest("tr");
        if (row.rowIndex === 1) {
            alert("First row can't be delete!");
            return;
        }

        const confirmed = confirm("Are you sure you want to delete this row?");
        if (!confirmed) {
            return;
        }
        row.remove();
    }
</script>

<script>
    const tvanBodyItem = document.getElementById("tableBodyvanItem");
    const tbtnAddItem = document.getElementById("btnAddItem");

    tbtnAddItem.addEventListener("click", function () {
        // Get the last row in the table body
        const lastRow = tvanBodyItem.lastElementChild;
        // Clone the last row
        const newRow = lastRow.cloneNode(true);
        // Clear the input fields in the new row
        const inputs = newRow.querySelectorAll("input");
        inputs.forEach(input => { input.value = ""; });
        // Increment the serial number in the new row
        const srNoValue = parseInt(lastRow.querySelector("#sr_no_item").value);
        const srNoInput = newRow.querySelector("#sr_no_item");
        //const srNoValue = parseInt(srNoInput.value);

        srNoInput.value = srNoValue + 1;
        // Get the newly added rate field
        // Append the new row to the table body
        tvanBodyItem.appendChild(newRow);
    });

    function removeSelectedItem(element) {
        const row = element.closest("tr");
        if (row.rowIndex === 1) {
            alert("First row can't be delete!");
            return;
        }

        const confirmed = confirm("Are you sure you want to delete this row?");
        if (!confirmed) {
            return;
        }
        row.remove();
    }
</script>

<script>
    /*
        async function fillDropdownList(items, dropdownList) {
            try {
                if (!Array.isArray(items) || !dropdownList instanceof HTMLSelectElement) {
                    throw new Error('Unexpected input format');
                }
    
                // Clear the existing options in the select element
                dropdownList.innerHTML = '';
    
                // Create an empty default option (if needed)
                const defaultOption = document.createElement('option');
                defaultOption.value = '';
                defaultOption.textContent = 'Vehicle No';
                dropdownList.appendChild(defaultOption);
    
                // Loop through the items and create an option for each one
                items.forEach(item => {
                    const option = document.createElement('option');
                    option.value = item.veh_no;
                    option.textContent = item.veh_no;
                    dropdownList.appendChild(option);
                });
            } catch (error) {
                console.error(error);
            }
        }
    
        async function fillDropdownListEmp(itemsEmp, dropdownListEmp) {
            try {
                if (!Array.isArray(itemsEmp) || !dropdownListEmp instanceof HTMLSelectElement) {
                    throw new Error('Unexpected input format');
                }
    
                // Clear the existing options in the select element
                dropdownListEmp.innerHTML = '';
    
                // Create an empty default option (if needed)
                const defaultOptionEmp = document.createElement('option');
                defaultOptionEmp.value = '';
                defaultOptionEmp.textContent = 'Sales Emp';
                dropdownListEmp.appendChild(defaultOptionEmp);
    
    
                // Loop through the items and create an option for each one
                itemsEmp.forEach(itemEmp => {
                    const optionEmp = document.createElement('option');
                    optionEmp.value = itemEmp.sp_name;
                    optionEmp.textContent = itemEmp.sp_name;
                    dropdownListEmp.appendChild(optionEmp);
                });
            } catch (error) {
                console.error(error);
            }
        }
    
        const btnRent = document.getElementById("btnRent");
        btnRent.addEventListener("click", async function () {
            const row = btnRent.closest("tr"); // Find the closest table row to the clicked button
            const customerId = document.getElementById("customer_id").value;
            const dropdownList = row.querySelector("#veh_no");
            const dropdownListEmp = row.querySelector("#sp_name");
    
            try {
                const response = await fetch(`/vanclaim/getRentData?customer_id=${customerId}`);
                const data = await response.json();
                console.log(data.rentData);
                const rentPerDay = data.rentData.rent_perday;
                const driverPerDay = data.rentData.driver_perday;
    
                // Now you can update the input fields in the current row
                const vehRentInput = row.querySelector("#veh_rent");
                const driverRentInput = row.querySelector("#driver_rent");
    
                vehRentInput.value = rentPerDay; // Use .value to set the input value
                driverRentInput.value = driverPerDay;
    
                await fillDropdownList(data.vehList, dropdownList);
                await fillDropdownListEmp(data.salesspList, dropdownListEmp);
    
            } catch (error) {
                console.error(error);
            }
        });
    */
</script>


{{!-- for date range --}}


{{> _lov-vendor}}