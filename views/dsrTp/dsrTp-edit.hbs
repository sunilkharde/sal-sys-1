<div class="container">
    <form id="dsrTpForm" action="/dsrTp/update/{{monData.year}}/{{monData.month}}/{{empData.emp_id}}" method="post">
        <!-- Header Card -->
        <div class="card shadow-sm mb-4">
            <div class="card-header bg-success text-white">
                <div class="row align-items-center">
                    <div class="col">
                        <h1 class="card-title mb-0 h5">
                            <i class="bi bi-person-circle me-2"></i>
                            {{empData.emp_name}}
                        </h1>
                    </div>
                    <div class="col-auto">
                        <span class="badge bg-light {{#if isNextMonth}}text-success{{else}}text-primary{{/if}}">
                            {{#if isNextMonth}}Next Month Planning{{else}}Current Month Planning{{/if}}
                        </span>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <h3 class="text-success h6">
                            <i class="bi bi-calendar-month me-2"></i>
                            {{monData.month_name}} {{monData.year}}
                        </h3>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <p class="mb-2 small"><strong>Designation:</strong> {{empData.desg_name}}</p>
                    </div>
                    <div class="col-md-4">
                        <p class="mb-2 small"><strong>HQ:</strong> {{empData.hq_name}}</p>
                    </div>
                    <div class="col-md-4">
                        <p class="mb-2 small"><strong>Week Off:</strong> {{empData.off_day}}</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Progress Indicator -->
        <div class="card shadow-sm mb-3">
            <div class="card-body py-3">
                <div class="row align-items-center">
                    <div class="col-md-8">
                        <div class="d-flex align-items-center">
                            <div class="progress flex-grow-1 me-3" style="height: 8px;">
                                <div class="progress-bar bg-success" role="progressbar"
                                    style="width: {{routeStats.percentage}}%" aria-valuenow="{{routeStats.percentage}}"
                                    aria-valuemin="0" aria-valuemax="100">
                                </div>
                            </div>
                            <small class="text-muted">
                                <strong>{{routeStats.filled}}/{{routeStats.total}}</strong> routes filled
                                ({{routeStats.percentage}}%)
                            </small>
                        </div>
                    </div>
                    <div class="col-md-4 text-end">
                        <small class="text-muted">
                            <span class="badge bg-success me-2">Filled: {{routeStats.filled}}</span>
                            <span class="badge bg-danger">Empty: {{routeStats.empty}}</span>
                        </small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Enhanced Location Filter -->
        <div class="card shadow-sm mb-4">
            <div class="card-header bg-light">
                <h5 class="card-title mb-0 h6">
                    <i class="bi bi-funnel me-2"></i>
                    Filter Routes by Location
                </h5>
            </div>
            <div class="card-body">
                <div class="row g-2">
                    <div class="col-md-5">
                        <label for="distFilter" class="form-label small">District</label>
                        <select class="form-select form-select-sm" id="distFilter">
                            <option value="">All Districts</option>
                        </select>
                    </div>
                    <div class="col-md-5">
                        <label for="cityFilter" class="form-label small">City</label>
                        <select class="form-select form-select-sm" id="cityFilter" disabled>
                            <option value="">All Cities</option>
                        </select>
                    </div>
                    <div class="col-md-2 d-flex align-items-end">
                        <button type="button" class="btn btn-outline-secondary btn-sm w-100" id="clearFiltersBtn"
                            onclick="routeManager.clearFilters()">
                            <i class="bi bi-x-circle me-1"></i>
                            <span class="btn-text">Clear</span>
                            <span class="btn-loading spinner-border spinner-border-sm me-1"
                                style="display: none;"></span>
                        </button>
                    </div>
                </div>

                <!-- Search Box with Button -->
                <div class="row mt-2">
                    <div class="col-12">
                        <div class="input-group input-group-sm">
                            <input type="text" class="form-control" id="routeSearch"
                                placeholder="Search routes by name, district, or city...">
                            <button class="btn btn-outline-success" type="button" id="searchBtn">
                                <i class="bi bi-search"></i>
                            </button>
                        </div>
                    </div>
                </div>

                <div class="row mt-2">
                    <div class="col-12">
                        <div id="filterStatus" class="text-muted">
                            <span id="routeCount">
                                <span class="spinner-border spinner-border-sm text-success me-2" role="status"
                                    id="routeLoader"></span>
                                Loading routes...
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tour Plan Table -->
        <div class="card shadow-sm">
            <div class="card-header bg-light">
                <div class="row align-items-center">
                    <div class="col">
                        <h4 class="card-title mb-0 h6">
                            <i class="bi bi-map me-2"></i>
                            Tour Plan
                        </h4>
                    </div>
                    <div class="col-auto">
                        <!-- Copy Previous Month TP Button -->
                        {{#if tpData}}
                        <button type="button" class="btn btn-outline-success btn-sm"
                            onclick="routeManager.copyPreviousMonthTP()">
                            <i class="bi bi-copy me-1"></i>
                            Copy Last Month's TP
                        </button>
                        {{else}}
                        <button type="button" class="btn btn-outline-success btn-sm"
                            onclick="window.location.href='/dsrTp/update/{{monData.year}}/{{monData.month}}/{{empData.emp_id}}'">
                            <i class="bi bi-arrow-clockwise me-1"></i>
                            Refresh
                        </button>
                        {{/if}}
                    </div>
                </div>
            </div>
            <div class="card-body p-0">
                <div style="max-height: 60vh; overflow-y: auto;">
                    <table class="table table-sm table-hover mb-0">
                        <thead class="sticky-top bg-light">
                            <tr>
                                <th class="col-1">Date</th>
                                <th class="col-1">Day</th>
                                <th class="col-10">Tour Route</th>
                            </tr>
                        </thead>
                        <tbody>
                            {{#each tpData}}
                            <tr
                                class="route-row {{#if this.tp_id}}route-filled{{else}}route-empty{{/if}} {{#isEqual this.off_day this.tp_day}}week-off{{/isEqual}}">
                                <td hidden>
                                    <input type="hidden" name="dsr_date[]" value="{{momentYMD this.dsr_date}}">
                                </td>
                                <td class="align-middle">
                                    <span class="fw-bold small">&nbsp;{{this.tp_date}}</span>
                                </td>
                                <td class="align-middle">
                                    <span
                                        class="small {{#isEqual this.off_day this.tp_day}}text-danger{{else}}text-muted{{/isEqual}}">
                                        {{this.tp_day}}
                                        {{#isEqual this.off_day this.tp_day}}
                                        <i class="bi bi-umbrella text-danger ms-1"></i>
                                        {{/isEqual}}
                                    </span>
                                </td>
                                <td>
                                    <div class="route-select-container">
                                        <div class="row g-1">
                                            <div class="col-12" hidden>
                                                <input type="hidden" name="from_city[]" value="{{this.from_city}}">
                                                <input type="hidden" name="to_city[]" value="{{this.to_city}}">
                                            </div>
                                            <div class="col-12">
                                                <input type="hidden" name="tp_id[]" value="{{this.tp_id}}">
                                                <input type="text" class="form-control form-control-sm route-display"
                                                    name="tp_name[]" value="{{this.tp_name}}"
                                                    placeholder="Select route..." readonly>
                                            </div>
                                            <div class="col-12">
                                                <select class="form-select form-select-sm route-select"
                                                    data-date="{{momentYMD this.dsr_date}}" value="{{this.tp_id}}">
                                                    <option value="">Select Route</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                            {{/each}}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="row mt-3">
            <div class="col-12 text-center">
                <button type="submit" class="btn btn-success btn-sm me-2">
                    <i class="bi bi-check-circle me-1"></i>
                    Save Tour Plan
                </button>
                <a href="/dsrTp/view-pm" class="btn btn-outline-secondary btn-sm">
                    <i class="bi bi-x-circle me-1"></i>
                    Cancel
                </a>
            </div>
        </div>
    </form>
</div>

<script>
    class RouteManager {
        constructor() {
            this.allRoutes = [];
            this.filteredRoutes = [];
            this.currentFilters = { dist: '', city: '' };
            this.existingSelections = new Map();
            this.isInitialized = false;

            this.init();
        }

        async init() {
            try {
                // Capture existing selections first
                this.captureExistingSelections();

                // Set up event listeners
                this.setupEventListeners();

                // Load initial data
                await this.loadInitialData();

                // Restore selections and apply styles
                this.restoreExistingSelections();
                this.applyVisualStyles();

                this.isInitialized = true;

            } catch (error) {
                console.error('Error initializing RouteManager:', error);
                this.showError('Failed to initialize page. Please refresh.');
            }
        }

        captureExistingSelections() {
            document.querySelectorAll('.route-select').forEach(select => {
                const date = select.getAttribute('data-date');
                const currentValue = select.value;
                const displayInput = select.closest('.route-row').querySelector('.route-display');
                const displayValue = displayInput ? displayInput.value : '';

                if (currentValue || displayValue) {
                    this.existingSelections.set(date, {
                        tp_id: currentValue,
                        tp_name: displayValue
                    });
                }
            });
        }

        setupEventListeners() {
            // Filter event listeners
            document.getElementById('distFilter').addEventListener('change', (e) => {
                this.currentFilters.dist = e.target.value;
                this.loadCitiesByDistrict(e.target.value);
                this.applyFilters();
                document.getElementById('routeSearch').value = '';
            });

            document.getElementById('cityFilter').addEventListener('change', (e) => {
                this.currentFilters.city = e.target.value;
                this.applyFilters();
                document.getElementById('routeSearch').value = '';
            });

            /*document.getElementById('routeSearch').addEventListener('input', (e) => {
                this.searchRoutes(e.target.value);
            });*/

            // Search button event listener
            document.getElementById('searchBtn').addEventListener('click', () => {
                const searchQuery = document.getElementById('routeSearch').value;
                this.searchRoutes(searchQuery);
            });

            // Enter key in search box
            document.getElementById('routeSearch').addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    this.searchRoutes(e.target.value);
                }
            });

            // Route select change handlers
            document.querySelectorAll('.route-select').forEach(select => {
                select.addEventListener('change', (e) => {
                    this.handleRouteChange(e.target);
                });
            });

            // Keyboard shortcuts
            document.addEventListener('keydown', (e) => {
                if (e.ctrlKey && e.key === 'f') {
                    e.preventDefault();
                    document.getElementById('routeSearch').focus();
                }
            });
        }

        async loadInitialData() {
            try {
                await Promise.all([
                    this.loadDistricts(),
                    this.loadAllRoutes()
                ]);
            } catch (error) {
                throw new Error('Failed to load initial data: ' + error.message);
            }
        }

        async loadDistricts() {
            try {
                const response = await fetch('/dsrTp/get-districts');
                if (!response.ok) throw new Error('Network response was not ok');

                const data = await response.json();
                if (data.success) {
                    this.updateDistrictFilter(data.districts);
                } else {
                    throw new Error(data.error);
                }
            } catch (error) {
                console.error('Error loading districts:', error);
                this.showError('Failed to load districts');
            }
        }

        async loadCitiesByDistrict(district) {
            const cityFilter = document.getElementById('cityFilter');

            try {
                const url = district ?
                    `/dsrTp/get-cities?dist=${encodeURIComponent(district)}` :
                    '/dsrTp/get-cities';

                const response = await fetch(url);
                if (!response.ok) throw new Error('Network response was not ok');

                const data = await response.json();
                if (data.success) {
                    this.updateCityFilter(data.cities);
                    cityFilter.disabled = false;
                } else {
                    throw new Error(data.error);
                }
            } catch (error) {
                console.error('Error loading cities:', error);
                cityFilter.innerHTML = '<option value="">Error loading cities</option>';
                cityFilter.disabled = false;
            }
        }

        async loadAllRoutes() {
            try {
                const response = await fetch('/dsrTp/get-all-routes');
                if (!response.ok) throw new Error('Network response was not ok');

                const data = await response.json();
                if (data.success) {
                    this.allRoutes = data.routes;
                    this.filteredRoutes = [...this.allRoutes];
                    this.updateAllDropdowns();
                    this.updateFilterStatus();
                } else {
                    throw new Error(data.error);
                }
            } catch (error) {
                console.error('Error loading routes:', error);
                this.showError('Failed to load routes');
            }
        }

        updateDistrictFilter(districts) {
            const distFilter = document.getElementById('distFilter');
            distFilter.innerHTML = '<option value="">All Districts</option>';

            districts.forEach(district => {
                const option = document.createElement('option');
                option.value = district.dist;
                option.textContent = district.dist;
                distFilter.appendChild(option);
            });
        }

        updateCityFilter(cities) {
            const cityFilter = document.getElementById('cityFilter');
            cityFilter.innerHTML = '<option value="">All Cities</option>';

            cities.forEach(city => {
                const option = document.createElement('option');
                option.value = city.city;
                option.textContent = city.city;
                cityFilter.appendChild(option);
            });
        }

        applyFilters() {
            this.filteredRoutes = this.allRoutes.filter(route => {
                const districtMatch = !this.currentFilters.dist || route.dist === this.currentFilters.dist;
                const cityMatch = !this.currentFilters.city || route.city === this.currentFilters.city;
                return districtMatch && cityMatch;
            });

            this.updateAllDropdowns();
            this.updateFilterStatus();
        }

        updateAllDropdowns() {
            document.querySelectorAll('.route-select').forEach(select => {
                this.updateDropdownOptions(select);
            });
        }

        updateDropdownOptions(select) {
            const date = select.getAttribute('data-date');
            const existingSelection = this.existingSelections.get(date);
            const currentValue = select.value;

            // Clear and rebuild options
            select.innerHTML = '<option value="">Select Route</option>';

            if (this.filteredRoutes.length > 0) {
                this.filteredRoutes.forEach(route => {
                    const option = document.createElement('option');
                    option.value = route.tp_id;
                    option.textContent = route.tp_name;
                    option.setAttribute('data-dist', route.dist);
                    option.setAttribute('data-city', route.city);
                    select.appendChild(option);
                });

                // Restore selection if it exists in filtered results
                if (existingSelection && existingSelection.tp_id) {
                    const optionExists = Array.from(select.options).some(opt =>
                        opt.value === existingSelection.tp_id
                    );

                    if (optionExists) {
                        select.value = existingSelection.tp_id;
                        this.updateRouteDisplay(select, existingSelection.tp_name);
                    }
                } else if (currentValue) {
                    select.value = currentValue;
                    const selectedOption = select.options[select.selectedIndex];
                    if (selectedOption) {
                        this.updateRouteDisplay(select, selectedOption.textContent);
                    }
                }
            }
        }

        restoreExistingSelections() {
            document.querySelectorAll('.route-select').forEach(select => {
                const date = select.getAttribute('data-date');
                const existingSelection = this.existingSelections.get(date);

                if (existingSelection && existingSelection.tp_id) {
                    select.value = existingSelection.tp_id;
                    this.updateRouteDisplay(select, existingSelection.tp_name);
                }
            });
        }

        handleRouteChange(selectElement) {
            const selectedOption = selectElement.options[selectElement.selectedIndex];
            const routeName = selectedOption ? selectedOption.textContent : '';

            this.updateRouteDisplay(selectElement, routeName);
            this.applyVisualStyles();
        }

        updateRouteDisplay(selectElement, routeName) {
            const row = selectElement.closest('.route-row');
            const displayInput = row.querySelector('.route-display');
            const tpIdInput = row.querySelector('input[name="tp_id[]"]');
            const fromCityInput = row.querySelector('input[name="from_city[]"]');
            const toCityInput = row.querySelector('input[name="to_city[]"]');

            if (displayInput) {
                displayInput.value = routeName;

                // Update visual state
                if (routeName && routeName.trim() !== '') {
                    row.classList.add('route-filled');
                    row.classList.remove('route-empty');
                    displayInput.classList.add('is-valid');
                } else {
                    row.classList.add('route-empty');
                    row.classList.remove('route-filled');
                    displayInput.classList.remove('is-valid');
                }
            }

            if (tpIdInput) tpIdInput.value = selectElement.value;

            // Parse route for from/to cities
            if (routeName && routeName.includes(' To ')) {
                const cities = routeName.split(' To ');
                if (fromCityInput) fromCityInput.value = cities[0].trim();
                if (toCityInput) toCityInput.value = cities[1].trim();
            }
        }

        applyVisualStyles() {
            let filledCount = 0;
            const totalCount = document.querySelectorAll('.route-display').length;

            document.querySelectorAll('.route-display').forEach(display => {
                if (display.value && display.value.trim() !== '') {
                    filledCount++;
                }
            });

            // Update progress in header if needed
            this.updateProgressIndicator(filledCount, totalCount);
        }

        updateProgressIndicator(filled, total) {
            // This can be enhanced to update the progress bar dynamically
            console.log(`Progress: ${filled}/${total} (${Math.round((filled / total) * 100)}%)`);
        }

        searchRoutes(query) {
            clearTimeout(this.searchTimeout);
            this.searchTimeout = setTimeout(() => {
                const searchLower = query.toLowerCase();
                this.filteredRoutes = this.allRoutes.filter(route =>
                    route.tp_name.toLowerCase().includes(searchLower) ||
                    (route.dist && route.dist.toLowerCase().includes(searchLower)) ||
                    (route.city && route.city.toLowerCase().includes(searchLower))
                );

                this.updateAllDropdowns();
                this.updateFilterStatus(`Search: "${query}" - ${this.filteredRoutes.length} results`);
            }, 300);
        }

        updateFilterStatus(message = '') {
            const routeCount = document.getElementById('routeCount');
            routeCount.textContent = `Showing ${this.filteredRoutes.length} of ${this.allRoutes.length} routes${message ? ` - ${message}` : ''}`;
        }

        clearFilters() {
            const clearBtn = document.getElementById('clearFiltersBtn');

            // Show loading state
            this.setButtonLoadingState(clearBtn, true, 'Clearing...');

            // Use setTimeout to allow UI to update before processing
            setTimeout(() => {
                try {
                    // Clear filter values
                    document.getElementById('distFilter').value = '';
                    document.getElementById('cityFilter').value = '';
                    document.getElementById('routeSearch').value = '';

                    // Reset filters
                    this.currentFilters = { dist: '', city: '' };
                    this.filteredRoutes = [...this.allRoutes];

                    // Update UI
                    this.updateAllDropdowns();
                    this.updateFilterStatus();
                    this.loadCitiesByDistrict(''); // Reset cities

                    // Show success feedback
                    this.showTemporarySuccess('Filters cleared successfully');

                } catch (error) {
                    console.error('Error clearing filters:', error);
                    this.showError('Failed to clear filters');
                } finally {
                    // Remove loading state
                    this.setButtonLoadingState(clearBtn, false, 'Clear');
                }
            }, 300); // Small delay for better UX
        }

        // New method to copy previous month's TP
        async copyPreviousMonthTP() {
            const copyButton = document.querySelector('button[onclick*="copyPreviousMonthTP"]');
            const originalText = copyButton.innerHTML;

            if (!confirm('Are you sure you want to copy the previous month\'s tour plan? This will overwrite any existing routes for this month.')) {
                return;
            }

            try {
                // Show loading state on button
                copyButton.classList.add('btn-copy-loading');
                copyButton.disabled = true;
                copyButton.innerHTML = '<span class="btn-text">Copying...</span>';

                // Show loading state
                this.showTemporarySuccess('Copying previous month\'s tour plan...');

                // Get current month and employee data from the page
                const currentYear = '{{monData.year}}';
                const currentMonth = '{{monData.month}}';
                const empId = '{{empData.emp_id}}';
                const isNextMonth = '{{isNextMonth}}' === 'true';

                // Validate required data
                if (!currentYear || !currentMonth || !empId) {
                    throw new Error('Missing required data for copying tour plan');
                }

                // Make AJAX call to copy TP
                const response = await fetch(`/dsrTp/copy-previous-month`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        year: currentYear,
                        month: currentMonth,
                        emp_id: empId,
                        next_month: isNextMonth
                    })
                });

                const result = await response.json();

                if (!response.ok) {
                    throw new Error(result.message || `HTTP error! status: ${response.status}`);
                }

                if (result.success) {
                    this.showTemporarySuccess(`Tour plan copied successfully! ${result.message} Refreshing...`);

                    // Refresh the page after a short delay
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    throw new Error(result.message || 'Failed to copy tour plan');
                }

            } catch (error) {
                console.error('Error copying tour plan:', error);
                this.showError('Failed to copy previous month\'s tour plan: ' + error.message);
            } finally {
                // Restore button state
                copyButton.classList.remove('btn-copy-loading');
                copyButton.disabled = false;
                copyButton.innerHTML = originalText;
            }
        }

        setButtonLoadingState(button, isLoading, text = '') {
            if (isLoading) {
                button.classList.add('btn-processing', 'btn-disabled');
                const btnText = button.querySelector('.btn-text');
                if (btnText && text) {
                    btnText.textContent = text;
                }
            } else {
                button.classList.remove('btn-processing', 'btn-disabled');
                const btnText = button.querySelector('.btn-text');
                if (btnText) {
                    btnText.textContent = text || 'Clear';
                }
            }
        }

        showTemporarySuccess(message) {
            // Remove existing success alerts
            document.querySelectorAll('.alert-success').forEach(alert => alert.remove());

            const successDiv = document.createElement('div');
            successDiv.className = 'alert alert-success alert-dismissible fade show mt-3';
            successDiv.innerHTML = `<i class="bi bi-check-circle me-2"></i>${message}
                                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>`;

            // Find a safe place to insert the alert
            this.insertAlertSafe(successDiv);

            // Auto-remove after 3 seconds
            setTimeout(() => {
                if (successDiv.parentNode) {
                    successDiv.remove();
                }
            }, 3000);
        }

        showError(message) {
            // Remove existing error alerts
            document.querySelectorAll('.alert-danger').forEach(alert => alert.remove());

            const errorDiv = document.createElement('div');
            errorDiv.className = 'alert alert-danger alert-dismissible fade show mt-3';
            errorDiv.innerHTML = `<i class="bi bi-exclamation-triangle me-2"></i>${message}
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>`;

            // Find a safe place to insert the alert
            this.insertAlertSafe(errorDiv);
        }

        insertAlertSafe(alertElement) {
            const container = document.querySelector('.container');
            if (!container) {
                console.warn('Container not found for alert');
                return;
            }

            // Find the first element in container to insert before
            const firstChild = container.firstElementChild;
            if (firstChild) {
                container.insertBefore(alertElement, firstChild);
            } else {
                // If no children, just append to container
                container.appendChild(alertElement);
            }
        }

    }

    // Initialize route manager when DOM is loaded
    let routeManager;

    document.addEventListener('DOMContentLoaded', function () {
        routeManager = new RouteManager();
    });
</script>

<style>
    .route-filled {
        background-color: #f8fff8 !important;
        border-left: 4px solid #198754;
    }

    .route-empty {
        background-color: #fff8f8 !important;
        border-left: 4px solid #dc3545;
    }

    .week-off {
        background-color: #fff3cd !important;
    }

    .route-display.is-valid {
        border-color: #198754;
        background-color: #f8fff8;
    }

    .table-hover tbody tr:hover {
        background-color: rgba(0, 0, 0, 0.04);
    }

    .card {
        border-radius: 8px;
    }

    .form-select-sm,
    .form-control-sm {
        border-radius: 4px;
    }

    .progress {
        border-radius: 4px;
    }

    /* Search input group styling */
    .input-group-sm .form-control {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
    }

    .input-group-sm .btn {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
    }

    /* Loading state styles */
    .btn-loading {
        display: none;
    }

    .btn-disabled {
        opacity: 0.6;
        pointer-events: none;
    }

    .btn-processing .btn-text {
        opacity: 0.7;
    }

    .btn-processing .btn-loading {
        display: inline-block;
    }

    /* Responsive improvements */
    @media (max-width: 768px) {
        .container {
            padding: 0 10px;
        }

        .card-body {
            padding: 1rem;
        }

        .table {
            font-size: 0.8rem;
        }

        .btn-sm {
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
        }
    }

    /* Alert positioning and styling */
    .alert {
        position: relative;
        z-index: 1000;
        margin-bottom: 1rem;
        border-radius: 8px;
    }

    /* Ensure container has proper positioning */
    .container {
        position: relative;
    }

    /* Loading state for the copy button */
    .btn-copy-loading {
        position: relative;
    }

    .btn-copy-loading .btn-text {
        visibility: hidden;
    }

    .btn-copy-loading::after {
        content: "";
        position: absolute;
        width: 16px;
        height: 16px;
        top: 50%;
        left: 50%;
        margin-left: -8px;
        margin-top: -8px;
        border: 2px solid #ffffff;
        border-radius: 50%;
        border-right-color: transparent;
        animation: spin 1s linear infinite;
    }

    @keyframes spin {
        from {
            transform: rotate(0deg);
        }

        to {
            transform: rotate(360deg);
        }
    }
</style>