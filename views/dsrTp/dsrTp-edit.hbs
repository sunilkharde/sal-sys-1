<div class="container">
    <form id="dsrTpForm" action="/dsrTp/update/{{monData.year}}/{{monData.month}}/{{empData.emp_id}}" method="post">
        <!-- Header Card (unchanged) -->
        <div class="card shadow-sm mb-4">
            <div class="card-header bg-success text-white">
                <div class="row align-items-center">
                    <div class="col">
                        <h1 class="card-title mb-0">
                            <i class="bi bi-person-circle me-2"></i>
                            {{empData.emp_name}}
                        </h1>
                    </div>
                    <div class="col-auto">
                        <span class="badge bg-light {{#if isNextMonth}}text-success{{else}}text-primary{{/if}} fs-6">
                            {{#if isNextMonth}}Next Month Planning{{else}}Current Month Planning{{/if}}
                        </span>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <h3 class="text-success">
                            <i class="bi bi-calendar-month me-2"></i>
                            {{monData.month_name}} {{monData.year}}
                        </h3>
                    </div>
                    <div class="col-md-6 text-end">
                        <button type="button" class="btn btn-outline-info btn-sm" onclick="fillWeekdays()">
                            <i class="bi bi-magic me-1"></i>
                            Auto Fill Weekdays
                        </button>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <p class="mb-2"><strong>Designation:</strong> {{empData.desg_name}}</p>
                    </div>
                    <div class="col-md-4">
                        <p class="mb-2"><strong>HQ:</strong> {{empData.hq_name}}</p>
                    </div>
                    <div class="col-md-4">
                        <p class="mb-2"><strong>Week Off:</strong> {{empData.off_day}}</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Enhanced Location Filter -->
        <div class="card shadow-sm mb-4">
            <div class="card-header bg-light">
                <h5 class="card-title mb-0">
                    <i class="bi bi-funnel me-2"></i>
                    Filter Routes by Location
                </h5>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-5">
                        <label for="distFilter" class="form-label">District</label>
                        <select class="form-select" id="distFilter">
                            <option value="">Loading districts...</option>
                        </select>
                    </div>
                    <div class="col-md-5">
                        <label for="cityFilter" class="form-label">City</label>
                        <select class="form-select" id="cityFilter" disabled>
                            <option value="">Select district first</option>
                        </select>
                    </div>
                    <div class="col-md-2 d-flex align-items-end">
                        <button type="button" class="btn btn-outline-secondary btn-sm w-100" onclick="clearFilters()">
                            <i class="bi bi-x-circle me-1"></i>
                            Clear
                        </button>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-12">
                        <div id="loadingRoutes" class="d-none">
                            <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                            <span class="text-muted">Loading routes...</span>
                        </div>
                        <div id="filterStatus" class="text-muted small">
                            <span id="routeCount">Loading routes...</span>
                            <span id="searchInfo" class="ms-2"></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tour Plan Table -->
        <div class="card shadow-sm">
            <div class="card-header bg-light d-flex justify-content-between align-items-center">
                <h4 class="card-title mb-0">
                    <i class="bi bi-map me-2"></i>
                    Tour Plan Details
                </h4>
                <div class="dropdown">
                    <button class="btn btn-outline-primary btn-sm dropdown-toggle" type="button"
                        id="bulkActionsDropdown" data-bs-toggle="dropdown">
                        <i class="bi bi-gear me-1"></i>
                        Bulk Actions
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#" onclick="fillWeekdays()">Fill Weekdays</a></li>
                        <li><a class="dropdown-item" href="#" onclick="clearAllRoutes()">Clear All Routes</a></li>
                    </ul>
                </div>
            </div>
            <div class="card-body p-0">
                <div style="max-height: 60vh; overflow-y: auto;">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="sticky-top bg-light">
                                <tr>
                                    <th class="col-3">Date</th>
                                    <th class="col-2">Day</th>
                                    <th class="col-7">Tour Route</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each tpData}}
                                <tr class="{{#isEqual this.off_day this.tp_day}}table-warning{{/isEqual}}">
                                    <td hidden>
                                        <input type="hidden" name="dsr_date[]" value="{{momentYMD this.dsr_date}}">
                                    </td>
                                    <td class="align-middle">
                                        <span class="fw-bold">{{this.tp_date}}</span>
                                    </td>
                                    <td class="align-middle">
                                        <span
                                            class="{{#isEqual this.off_day this.tp_day}}text-danger{{else}}text-muted{{/isEqual}}">
                                            {{this.tp_day}}
                                            {{#isEqual this.off_day this.tp_day}}
                                            <i class="bi bi-umbrella text-danger ms-1"></i>
                                            {{/isEqual}}
                                        </span>
                                    </td>
                                    <td>
                                        <div class="route-select-container">
                                            <div class="row g-2">
                                                <div class="col-12" hidden>
                                                    <input type="hidden" name="from_city[]" value="{{this.from_city}}">
                                                    <input type="hidden" name="to_city[]" value="{{this.to_city}}">
                                                </div>
                                                <div class="col-12">
                                                    <input type="hidden" name="tp_id[]" value="{{this.tp_id}}">
                                                    <input type="text"
                                                        class="form-control form-control-sm route-display"
                                                        name="tp_name[]" value="{{this.tp_name}}"
                                                        placeholder="Select route..." readonly>
                                                </div>
                                                <div class="col-12 position-relative">
                                                    <select class="form-select form-control-sm route-select"
                                                        data-date="{{momentYMD this.dsr_date}}">
                                                        <option value="">Select Route</option>
                                                        <!-- Options will be loaded dynamically -->
                                                    </select>
                                                    <div class="route-loading-spinner spinner-border spinner-border-sm d-none position-absolute"
                                                        style="right: 30px; top: 50%; transform: translateY(-50%);">
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="row mt-4">
            <div class="col-12 text-center">
                <button type="submit" class="btn btn-success btn-lg me-3">
                    <i class="bi bi-check-circle me-2"></i>
                    Save Tour Plan
                </button>
                <a href="/dsrTp/view-pm" class="btn btn-outline-secondary btn-lg">
                    <i class="bi bi-x-circle me-2"></i>
                    Cancel
                </a>
            </div>
        </div>
    </form>
</div>

<script>
    // Enhanced Route Manager with better performance
    // Enhanced Route Manager with optimized location filtering
    class RouteManager {
        constructor() {
            this.allRoutes = [];
            this.districts = [];
            this.cities = [];
            this.filteredRoutes = [];
            this.isLoading = false;
            this.currentFilters = { dist: '', city: '' };
            this.init();
        }

        async init() {
            // Set up event listeners
            document.getElementById('distFilter').addEventListener('change', (e) => {
                this.currentFilters.dist = e.target.value;
                this.loadCitiesByDistrict(e.target.value);
                this.applyFilters();
            });

            document.getElementById('cityFilter').addEventListener('change', (e) => {
                this.currentFilters.city = e.target.value;
                this.applyFilters();
            });

            // Load initial data
            await Promise.all([
                this.loadDistricts(),
                this.loadAllRoutes()
            ]);
        }

        async loadDistricts() {
            try {
                const response = await fetch('/dsrTp/get-districts');
                const data = await response.json();

                if (data.success) {
                    this.districts = data.districts;
                    this.updateDistrictFilter();
                }
            } catch (error) {
                console.error('Error loading districts:', error);
            }
        }

        async loadCitiesByDistrict(district) {
            const cityFilter = document.getElementById('cityFilter');
            cityFilter.disabled = true;
            cityFilter.innerHTML = '<option value="">Loading cities...</option>';

            try {
                const url = district ?
                    `/dsrTp/get-cities?dist=${encodeURIComponent(district)}` :
                    '/dsrTp/get-cities';

                const response = await fetch(url);
                const data = await response.json();

                if (data.success) {
                    this.cities = data.cities;
                    this.updateCityFilter();
                }
            } catch (error) {
                console.error('Error loading cities:', error);
                cityFilter.innerHTML = '<option value="">Error loading cities</option>';
            } finally {
                cityFilter.disabled = false;
            }
        }

        async loadAllRoutes() {
            const loadingEl = document.getElementById('loadingRoutes');
            const routeCountEl = document.getElementById('routeCount');

            loadingEl.classList.remove('d-none');
            this.isLoading = true;

            try {
                const response = await fetch('/dsrTp/get-all-routes');
                const data = await response.json();

                if (data.success) {
                    this.allRoutes = data.routes;
                    this.filteredRoutes = [...this.allRoutes];
                    this.updateAllDropdowns();

                    routeCountEl.textContent = `Loaded ${this.allRoutes.length} routes`;
                    this.updateFilterStatus();
                } else {
                    throw new Error(data.error);
                }
            } catch (error) {
                console.error('Error loading routes:', error);
                routeCountEl.textContent = 'Error loading routes';
            } finally {
                loadingEl.classList.add('d-none');
                this.isLoading = false;
            }
        }

        updateDistrictFilter() {
            const distFilter = document.getElementById('distFilter');
            distFilter.innerHTML = '<option value="">All Districts</option>';

            this.districts.forEach(district => {
                const option = document.createElement('option');
                option.value = district.dist;
                option.textContent = district.dist;
                distFilter.appendChild(option);
            });
        }

        updateCityFilter() {
            const cityFilter = document.getElementById('cityFilter');
            cityFilter.innerHTML = '<option value="">All Cities</option>';

            this.cities.forEach(city => {
                const option = document.createElement('option');
                option.value = city.city;
                option.textContent = city.city;
                cityFilter.appendChild(option);
            });

            // Restore city selection if it exists in current cities
            if (this.currentFilters.city) {
                const cityExists = this.cities.some(c => c.city === this.currentFilters.city);
                if (cityExists) {
                    cityFilter.value = this.currentFilters.city;
                } else {
                    this.currentFilters.city = '';
                }
            }
        }

        applyFilters() {
            this.filteredRoutes = this.allRoutes.filter(route => {
                const districtMatch = !this.currentFilters.dist || route.dist === this.currentFilters.dist;
                const cityMatch = !this.currentFilters.city || route.city === this.currentFilters.city;
                return districtMatch && cityMatch;
            });

            this.updateAllDropdowns();
            this.updateFilterStatus();
        }

        updateFilterStatus() {
            const searchInfo = document.getElementById('searchInfo');
            const routeCount = document.getElementById('routeCount');

            routeCount.textContent = `Showing ${this.filteredRoutes.length} of ${this.allRoutes.length} routes`;

            if (this.currentFilters.dist || this.currentFilters.city) {
                const filters = [];
                if (this.currentFilters.dist) filters.push(`District: ${this.currentFilters.dist}`);
                if (this.currentFilters.city) filters.push(`City: ${this.currentFilters.city}`);
                searchInfo.textContent = `Filtered by: ${filters.join(', ')}`;
            } else {
                searchInfo.textContent = 'Showing all routes';
            }
        }

        updateAllDropdowns() {
            const selects = document.querySelectorAll('.route-select');
            selects.forEach(select => {
                this.updateDropdown(select, this.filteredRoutes);
            });
        }

        updateDropdown(select, routes) {
            const currentValue = select.value;

            // Clear existing options except the first one
            while (select.options.length > 1) {
                select.remove(1);
            }

            // Add filtered routes
            routes.forEach(route => {
                const option = document.createElement('option');
                option.value = route.tp_id;
                option.textContent = route.tp_name;
                option.setAttribute('data-dist', route.dist);
                option.setAttribute('data-city', route.city);

                if (route.tp_id == currentValue) {
                    option.selected = true;
                }

                select.appendChild(option);
            });

            // If current value is not in filtered routes, clear selection
            if (currentValue && !routes.find(r => r.tp_id == currentValue)) {
                select.value = '';
                this.updateRouteDisplay(select, '');
            }
        }

        updateRouteDisplay(selectElement, routeName) {
            const row = selectElement.closest('tr');
            const displayInput = row.querySelector('.route-display');
            const tpIdInput = row.querySelector('input[name="tp_id[]"]');
            const fromCityInput = row.querySelector('input[name="from_city[]"]');
            const toCityInput = row.querySelector('input[name="to_city[]"]');

            if (displayInput) displayInput.value = routeName;
            if (tpIdInput) tpIdInput.value = selectElement.value;

            // Parse route for from/to cities
            if (routeName && routeName.includes(' To ')) {
                const cities = routeName.split(' To ');
                if (fromCityInput) fromCityInput.value = cities[0].trim();
                if (toCityInput) toCityInput.value = cities[1].trim();
            } else {
                if (fromCityInput) fromCityInput.value = '';
                if (toCityInput) toCityInput.value = '';
            }
        }
    }

    // Initialize route manager
    let routeManager;

    document.addEventListener('DOMContentLoaded', function () {
        routeManager = new RouteManager();

        // Set up change handlers for all route selects
        document.querySelectorAll('.route-select').forEach(select => {
            select.addEventListener('change', function () {
                const selectedOption = this.options[this.selectedIndex];
                const routeName = selectedOption ? selectedOption.textContent : '';
                routeManager.updateRouteDisplay(this, routeName);
            });
        });
    });

    function clearFilters() {
        document.getElementById('distFilter').value = '';
        document.getElementById('cityFilter').value = '';
        routeManager.currentFilters = { dist: '', city: '' };
        routeManager.loadCitiesByDistrict(''); // Load all cities
        routeManager.applyFilters();
    }

    function clearAllRoutes() {
        if (confirm('Are you sure you want to clear all routes?')) {
            document.querySelectorAll('.route-select').forEach(select => {
                select.value = '';
                select.dispatchEvent(new Event('change'));
            });
        }
    }

    function fillWeekdays() {
        const rows = document.querySelectorAll('tbody tr');
        let filledCount = 0;

        rows.forEach(row => {
            const dayCell = row.querySelector('td:nth-child(2)');
            const select = row.querySelector('.route-select');
            const dayText = dayCell.textContent.trim();

            // Skip weekends and week off days
            if (!['Sat', 'Sun'].includes(dayText) && !row.classList.contains('table-warning')) {
                if (select && select.value === '' && select.options.length > 1) {
                    // Select first available route
                    select.selectedIndex = 1;
                    select.dispatchEvent(new Event('change'));
                    filledCount++;
                }
            }
        });

        if (filledCount > 0) {
            alert(`Successfully filled ${filledCount} weekdays with routes!`);
        } else {
            alert('No empty weekdays found to fill.');
        }
    }

    // Optional: Add search functionality
    function setupSearch() {
        const searchInput = document.createElement('input');
        searchInput.type = 'text';
        searchInput.className = 'form-control form-control-sm mt-2';
        searchInput.placeholder = 'Search routes...';
        searchInput.addEventListener('input', (e) => {
            routeManager.searchRoutes(e.target.value);
        });

        document.querySelector('.card-body').appendChild(searchInput);
    }
</script>

<style>
    .card {
        border-radius: 12px;
    }

    .table th {
        border-top: none;
        font-weight: 600;
        background-color: #f8f9fa;
    }

    .sticky-top {
        z-index: 10;
    }

    .btn {
        border-radius: 8px;
        font-weight: 500;
    }

    .form-control,
    .form-select {
        border-radius: 6px;
    }

    .table-hover tbody tr:hover {
        background-color: rgba(0, 123, 255, 0.05);
    }

    .route-display {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
    }

    .route-select-container {
        position: relative;
    }

    .route-loading-spinner {
        z-index: 5;
    }
</style>