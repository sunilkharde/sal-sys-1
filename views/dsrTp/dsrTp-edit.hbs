<div class="container">
    <form id="dsrTpForm" action="/dsrTp/update/{{monData.year}}/{{monData.month}}/{{empData.emp_id}}"
        method="post">
        <!-- Header Card -->
        <div class="card shadow-sm mb-4">
            <div class="card-header bg-success text-white">
                <div class="row align-items-center">
                    <div class="col">
                        <h1 class="card-title mb-0">
                            <i class="bi bi-person-circle me-2"></i>
                            {{empData.emp_name}}
                        </h1>
                    </div>
                    <div class="col-auto">
                        {{!-- <span class="badge bg-light text-success fs-6">Next Month</span> --}}
                        <span class="badge bg-light {{#if isNextMonth}}text-success{{else}}text-primary{{/if}} fs-6">
                            {{#if isNextMonth}}Next Month Planning{{else}}Current Month Planning{{/if}}
                        </span>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <h3 class="text-success">
                            <i class="bi bi-calendar-month me-2"></i>
                            {{monData.month_name}} {{monData.year}}
                        </h3>
                    </div>
                    <div class="col-md-6 text-end">
                        <button type="button" class="btn btn-outline-info btn-sm" onclick="fillWeekdays()">
                            <i class="bi bi-magic me-1"></i>
                            Auto Fill Weekdays
                        </button>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <p class="mb-2"><strong>Designation:</strong> {{empData.desg_name}}</p>
                    </div>
                    <div class="col-md-4">
                        <p class="mb-2"><strong>HQ:</strong> {{empData.hq_name}}</p>
                    </div>
                    <div class="col-md-4">
                        <p class="mb-2"><strong>Week Off:</strong> {{empData.off_day}}</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Location Filter -->
        <div class="card shadow-sm mb-4">
            <div class="card-header bg-light">
                <h5 class="card-title mb-0">
                    <i class="bi bi-funnel me-2"></i>
                    Filter Routes by Location
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-8">
                        <label for="locationFilter" class="form-label">Select District - City</label>
                        <select class="form-select" id="locationFilter">
                            <option value="">All Locations</option>
                            {{#each combinedDistCityList}}
                            <option value="{{this.dist}}|{{this.city}}">{{this.dist_city}}</option>
                            {{/each}}
                        </select>
                    </div>
                    <div class="col-md-4 d-flex align-items-end">
                        <button type="button" class="btn btn-outline-secondary btn-sm w-100"
                            onclick="clearLocationFilter()">
                            <i class="bi bi-x-circle me-1"></i>
                            Clear Filter
                        </button>
                    </div>
                </div>
                <div class="row mt-2">
                    <div class="col-12">
                        <div id="loadingRoutes" class="d-none">
                            <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                            <span class="text-muted">Loading routes...</span>
                        </div>
                        <span id="filterStatus" class="text-muted small"></span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tour Plan Table -->
        <div class="card shadow-sm">
            <div class="card-header bg-light">
                <h4 class="card-title mb-0">
                    <i class="bi bi-map me-2"></i>
                    Tour Plan Details
                </h4>
            </div>
            <div class="card-body p-0">
                <div style="max-height: 60vh; overflow-y: auto;">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="sticky-top bg-light">
                                <tr>
                                    <th class="col-3">Date</th>
                                    <th class="col-2">Day</th>
                                    <th class="col-7">Tour Route</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each tpData}}
                                <tr class="{{#isEqual this.off_day this.tp_day}}table-warning{{/isEqual}}">
                                    <td hidden>
                                        <input type="hidden" name="dsr_date[]" value="{{momentYMD this.dsr_date}}">
                                    </td>
                                    <td class="align-middle">
                                        <span class="fw-bold">{{this.tp_date}}</span>
                                    </td>
                                    <td class="align-middle">
                                        <span
                                            class="{{#isEqual this.off_day this.tp_day}}text-danger{{else}}text-muted{{/isEqual}}">
                                            {{this.tp_day}}
                                            {{#isEqual this.off_day this.tp_day}}
                                            <i class="bi bi-umbrella text-danger ms-1"></i>
                                            {{/isEqual}}
                                        </span>
                                    </td>
                                    <td>
                                        <div class="row g-2">
                                            <div class="col-12" hidden>
                                                <input type="hidden" name="from_city[]" value="{{this.from_city}}">
                                                <input type="hidden" name="to_city[]" value="{{this.to_city}}">
                                            </div>
                                            <div class="col-12">
                                                <input type="hidden" name="tp_id[]" value="{{this.tp_id}}">
                                                <input type="text" class="form-control form-control-sm route-display"
                                                    name="tp_name[]" value="{{this.tp_name}}" placeholder="Select route..."
                                                    readonly>
                                            </div>
                                            <div class="col-12">
                                                <select class="form-select form-select-sm route-select"
                                                    data-date="{{momentYMD this.dsr_date}}">
                                                    <option value="">Select Route</option>
                                                    <!-- Options will be loaded dynamically -->
                                                </select>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="row mt-4">
            <div class="col-12 text-center">
                <button type="submit" class="btn btn-success btn-lg me-3">
                    <i class="bi bi-check-circle me-2"></i>
                    Save Tour Plan
                </button>
                <a href="/dsrTp/view-pm" class="btn btn-outline-secondary btn-lg">
                    <i class="bi bi-x-circle me-2"></i>
                    Cancel
                </a>
            </div>
        </div>
    </form>
</div>

<script>
    // Route management with lazy loading
    class RouteManager {
        constructor() {
            this.routesCache = new Map();
            this.currentFilter = '';
            this.init();
        }

        init() {
            // Set up event listeners
            document.getElementById('locationFilter').addEventListener('change', (e) => {
                this.loadRoutesByLocation(e.target.value);
            });

            // Load initial empty state
            this.updateAllDropdowns([]);
        }

        async loadRoutesByLocation(locationFilter) {
            const loadingEl = document.getElementById('loadingRoutes');
            const statusEl = document.getElementById('filterStatus');

            loadingEl.classList.remove('d-none');
            statusEl.textContent = 'Loading routes...';

            try {
                let url = '/dsrTp/get-routes-by-location';
                const params = new URLSearchParams();

                if (locationFilter) {
                    const [dist, city] = locationFilter.split('|');
                    if (dist) params.append('dist', dist);
                    if (city) params.append('city', city);
                }

                if (params.toString()) {
                    url += '?' + params.toString();
                }

                const response = await fetch(url);
                const data = await response.json();

                if (data.success) {
                    this.routesCache.set(locationFilter, data.routes);
                    this.updateAllDropdowns(data.routes);

                    statusEl.textContent = locationFilter ?
                        `Showing ${data.routes.length} routes` :
                        'Showing all routes';
                } else {
                    throw new Error(data.error);
                }
            } catch (error) {
                console.error('Error loading routes:', error);
                statusEl.textContent = 'Error loading routes';
                this.updateAllDropdowns([]);
            } finally {
                loadingEl.classList.add('d-none');
            }
        }

        updateAllDropdowns(routes) {
            const selects = document.querySelectorAll('.route-select');

            selects.forEach(select => {
                const currentValue = select.value;
                this.updateDropdown(select, routes, currentValue);
            });
        }

        updateDropdown(select, routes, currentValue = '') {
            // Clear existing options except the first one
            while (select.options.length > 1) {
                select.remove(1);
            }

            // Add new options
            routes.forEach(route => {
                const option = document.createElement('option');
                option.value = route.tp_id;
                option.textContent = route.tp_name;
                option.setAttribute('data-dist', route.dist);
                option.setAttribute('data-city', route.city);

                if (route.tp_id == currentValue) {
                    option.selected = true;
                    this.updateRouteDisplay(select, route.tp_name);
                }

                select.appendChild(option);
            });

            // If current value is not in new routes, clear it
            if (currentValue && !routes.find(r => r.tp_id == currentValue)) {
                select.value = '';
                this.updateRouteDisplay(select, '');
            }
        }

        updateRouteDisplay(selectElement, routeName) {
            const row = selectElement.closest('tr');
            const displayInput = row.querySelector('.route-display');
            const tpIdInput = row.querySelector('input[name="tp_id[]"]');
            const fromCityInput = row.querySelector('input[name="from_city[]"]');
            const toCityInput = row.querySelector('input[name="to_city[]"]');

            if (displayInput) displayInput.value = routeName;
            if (tpIdInput) tpIdInput.value = selectElement.value;

            // Parse route for from/to cities
            if (routeName && routeName.includes(' To ')) {
                const cities = routeName.split(' To ');
                if (fromCityInput) fromCityInput.value = cities[0].trim();
                if (toCityInput) toCityInput.value = cities[1].trim();
            } else {
                if (fromCityInput) fromCityInput.value = '';
                if (toCityInput) toCityInput.value = '';
            }
        }
    }

    // Initialize route manager
    let routeManager;

    document.addEventListener('DOMContentLoaded', function () {
        routeManager = new RouteManager();

        // Set up change handlers for all route selects
        document.querySelectorAll('.route-select').forEach(select => {
            select.addEventListener('change', function () {
                const selectedOption = this.options[this.selectedIndex];
                const routeName = selectedOption ? selectedOption.textContent : '';
                routeManager.updateRouteDisplay(this, routeName);
            });
        });

        // Load initial routes (all locations)
        routeManager.loadRoutesByLocation('');
    });

    function clearLocationFilter() {
        document.getElementById('locationFilter').value = '';
        routeManager.loadRoutesByLocation('');
    }

    function fillWeekdays() {
        const rows = document.querySelectorAll('tbody tr');
        let filledCount = 0;

        rows.forEach(row => {
            const dayCell = row.querySelector('td:nth-child(2)');
            const select = row.querySelector('.route-select');
            const dayText = dayCell.textContent.trim();

            // Skip weekends and week off days
            if (!['Sat', 'Sun'].includes(dayText) && !row.classList.contains('table-warning')) {
                if (select && select.value === '' && select.options.length > 1) {
                    // Select first available route
                    select.selectedIndex = 1;
                    select.dispatchEvent(new Event('change'));
                    filledCount++;
                }
            }
        });

        if (filledCount > 0) {
            alert(`Successfully filled ${filledCount} weekdays with routes!`);
        } else {
            alert('No empty weekdays found to fill.');
        }
    }
</script>

<style>
    .card {
        border-radius: 12px;
    }

    .table th {
        border-top: none;
        font-weight: 600;
        background-color: #f8f9fa;
    }

    .sticky-top {
        z-index: 10;
    }

    .btn {
        border-radius: 8px;
        font-weight: 500;
    }

    .form-control,
    .form-select {
        border-radius: 6px;
    }

    .table-hover tbody tr:hover {
        background-color: rgba(0, 123, 255, 0.05);
    }

    .route-display {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
    }
</style>