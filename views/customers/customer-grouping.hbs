<div class="container">
    <!-- Toast notifications -->
    <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1050">
        <div id="successToast" class="toast align-items-center text-white bg-success border-0" role="alert"
            aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body" id="successToastMessage"></div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"
                    aria-label="Close"></button>
            </div>
        </div>
        <div id="errorToast" class="toast align-items-center text-white bg-danger border-0" role="alert"
            aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body" id="errorToastMessage"></div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"
                    aria-label="Close"></button>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3 class="card-title mb-0">Customer Grouping Management</h3>
                    <button class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#addGroupModal">
                        <i class="fas fa-plus me-1"></i> Create New Group
                    </button>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered table-hover" id="groupingTable">
                            <thead class="bg-light">
                                <tr>
                                    <th>Customer Name</th>
                                    <th>External Code</th>
                                    <th>Linked To</th>
                                    <th>Status</th>
                                    <th>Primary</th>
                                    <th class="text-center">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each customers}}
                                <tr>
                                    <td>
                                        <strong>{{customer_name}} - {{cust_status}}</strong>
                                    </td>
                                    <td>{{ext_code}}</td>
                                    <td>
                                        {{#if ext_code_key}}
                                        {{ext_code_key}}
                                        {{else}}
                                        <span class="text-muted">-</span>
                                        {{/if}}
                                    </td>
                                    <td>
                                        {{#if (eq status 'Primary')}}
                                        <span class="badge bg-primary">{{status}}</span>
                                        {{else if (eq status 'Secondary')}}
                                        <span class="badge bg-info">{{status}}</span>
                                        {{else}}
                                        <span class="badge bg-secondary">{{status}}</span>
                                        {{/if}}
                                    </td>
                                    <td>
                                        {{primary_name}}
                                    </td>
                                    <td class="text-center">
                                        <div class="btn-group btn-group-sm" role="group">
                                            {{#if (eq status 'Primary')}}
                                            <button class="btn btn-info edit-group" data-bs-toggle="modal"
                                                data-bs-target="#editGroupModal" data-customer-id="{{customer_id}}"
                                                data-customer-name="{{customer_name}}" data-ext-code="{{ext_code}}"
                                                title="Edit Group">
                                                {{!-- <i class="bi bi-pencil-square"></i> --}}
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn btn-danger remove-group"
                                                data-customer-id="{{customer_id}}"
                                                data-customer-name="{{customer_name}}" title="Remove Group">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                            {{else if (eq status 'Secondary')}}
                                            <button class="btn btn-warning remove-from-group"
                                                data-customer-id="{{customer_id}}" title="Remove from Group">
                                                <i class="bi bi-link-45deg"></i>
                                            </button>
                                            {{else}}
                                            <button class="btn btn-success add-to-group" data-bs-toggle="modal"
                                                data-bs-target="#addToGroupModal" data-customer-id="{{customer_id}}"
                                                data-customer-name="{{customer_name}}" data-ext-code="{{ext_code}}"
                                                title="Add to Group">
                                                <i class="bi bi-link"></i>
                                            </button>
                                            <button class="btn btn-primary make-primary" data-bs-toggle="modal"
                                                data-bs-target="#makePrimaryModal" data-customer-id="{{customer_id}}"
                                                data-customer-name="{{customer_name}}" data-ext-code="{{ext_code}}"
                                                title="Make Primary">
                                                <i class="bi bi-award"></i>
                                            </button>
                                            {{/if}}
                                        </div>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create New Group Modal -->
<div class="modal fade" id="addGroupModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Customer Group</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="createGroupForm">
                <div class="modal-body">
                    <div class="form-group mb-3">
                        <label class="form-label">Select Customer to Make Primary:</label>
                        <select name="primary_customer_id" class="form-control" required>
                            <option value="">Select customer...</option>
                            {{#each primaryCandidates}}
                            <option value="{{customer_id}}" data-ext-code="{{ext_code}}">
                                {{customer_name}} ({{ext_code}})
                            </option>
                            {{/each}}
                        </select>
                    </div>
                    <div class="form-group mb-3">
                        <label class="form-label">Group Code:</label>
                        <input type="text" name="group_code" class="form-control" required
                            placeholder="Enter group code" id="groupCodeInput">
                        <small class="form-text text-muted">This will become both ext_code and ext_code_key for the
                            primary customer</small>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create Group</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Add to Group Modal -->
<div class="modal fade" id="addToGroupModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Customer to Group</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addToGroupForm">
                <div class="modal-body">
                    <input type="hidden" name="customer_id" id="addCustomerId">
                    <div class="form-group mb-3">
                        <label class="form-label">Customer:</label>
                        <input type="text" id="addCustomerName" class="form-control" readonly>
                    </div>
                    <div class="form-group mb-3">
                        <label class="form-label">External Code:</label>
                        <input type="text" id="addCustomerExtCode" class="form-control" readonly>
                    </div>
                    <div class="form-group mb-3">
                        <label class="form-label">Select Primary Group:</label>
                        <select name="primary_code" class="form-control" required id="primaryGroupSelect">
                            <option value="">Select primary group...</option>
                            {{#each customers}}
                            {{#if (eq status 'Primary')}}
                            <option value="{{ext_code}}">{{customer_name}} ({{ext_code}})</option>
                            {{/if}}
                            {{/each}}
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add to Group</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Make Primary Modal -->
<div class="modal fade" id="makePrimaryModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Make Customer Primary</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="makePrimaryForm">
                <div class="modal-body">
                    <input type="hidden" name="customer_id" id="makePrimaryCustomerId">
                    <div class="form-group mb-3">
                        <label class="form-label">Customer:</label>
                        <input type="text" id="makePrimaryCustomerName" class="form-control" readonly>
                    </div>
                    <div class="form-group mb-3">
                        <label class="form-label">Current External Code:</label>
                        <input type="text" id="makePrimaryCurrentExtCode" class="form-control" readonly>
                    </div>
                    <div class="form-group mb-3">
                        <label class="form-label">Group Code:</label>
                        <input type="text" name="group_code" class="form-control" required
                            placeholder="Enter group code" id="makePrimaryGroupCode">
                        <small class="form-text text-muted">This will be used as both ext_code and ext_code_key</small>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Make Primary</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Group Modal -->
<div class="modal fade" id="editGroupModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Group</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editGroupForm">
                <input type="hidden" name="customer_id" id="editCustomerId">
                <div class="modal-body">
                    <div class="form-group mb-3">
                        <label class="form-label">Customer:</label>
                        <input type="text" id="editCustomerName" class="form-control" readonly>
                    </div>
                    <div class="form-group mb-3">
                        <label class="form-label">Current External Code:</label>
                        <input type="text" id="editCurrentExtCode" class="form-control" readonly>
                    </div>
                    <div class="form-group mb-3">
                        <label class="form-label">Group Code:</label>
                        <input type="text" name="group_code" class="form-control" required
                            placeholder="Enter group code" id="editGroupCode">
                        <small class="form-text text-muted">This will be used as both ext_code and ext_code_key</small>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Update Group</button>
                </div>
            </form>
        </div>
    </div>
</div>


<style>
    .badge {
        font-size: 0.85em;
        padding: 0.4em 0.6em;
    }

    .btn-group-sm>.btn {
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
    }

    .btn-group {
        flex-wrap: nowrap;
    }

    .table th {
        background-color: #f8f9fa;
    }

    .toast-container {
        z-index: 1050;
    }

    /* Tooltip styling */
    .btn {
        position: relative;
    }

    /* Ensure buttons are properly spaced */
    .btn-group .btn {
        margin: 0 2px;
    }
</style>


<script>
    // Toast initialization
    const successToast = new bootstrap.Toast(document.getElementById('successToast'));
    const errorToast = new bootstrap.Toast(document.getElementById('errorToast'));

    function showToast(message, isSuccess = true) {
        if (isSuccess) {
            document.getElementById('successToastMessage').textContent = message;
            successToast.show();
        } else {
            document.getElementById('errorToastMessage').textContent = message;
            errorToast.show();
        }
    }

    // Initialize DataTable without sorting to preserve grouping
    $(document).ready(function () {
        $('#groupingTable').DataTable({
            pageLength: 10,
            ordering: false, // Disable DataTable sorting to preserve SQL ordering
            searching: true,
            paging: true,
            info: true,
            columnDefs: [
                {
                    target: 5, // Actions column
                    orderable: false
                }
            ]
        });

        // Initialize tooltips for icon buttons
        $('[title]').tooltip({
            placement: 'top',
            trigger: 'hover'
        });
    });


    // Modal event handlers
    const addToGroupModal = document.getElementById('addToGroupModal');
    addToGroupModal.addEventListener('show.bs.modal', function (event) {
        const button = event.relatedTarget;
        const customerId = button.getAttribute('data-customer-id');
        const customerName = button.getAttribute('data-customer-name');
        const extCode = button.getAttribute('data-ext-code');

        document.getElementById('addCustomerId').value = customerId;
        document.getElementById('addCustomerName').value = customerName;
        document.getElementById('addCustomerExtCode').value = extCode;
    });

    const makePrimaryModal = document.getElementById('makePrimaryModal');
    makePrimaryModal.addEventListener('show.bs.modal', function (event) {
        const button = event.relatedTarget;
        const customerId = button.getAttribute('data-customer-id');
        const customerName = button.getAttribute('data-customer-name');
        const extCode = button.getAttribute('data-ext-code');

        document.getElementById('makePrimaryCustomerId').value = customerId;
        document.getElementById('makePrimaryCustomerName').value = customerName;
        document.getElementById('makePrimaryCurrentExtCode').value = extCode;
        document.getElementById('makePrimaryGroupCode').value = extCode;
    });

    const editGroupModal = document.getElementById('editGroupModal');
    editGroupModal.addEventListener('show.bs.modal', function (event) {
        const button = event.relatedTarget;
        const customerId = button.getAttribute('data-customer-id');
        const customerName = button.getAttribute('data-customer-name');
        const extCode = button.getAttribute('data-ext-code');

        document.getElementById('editCustomerId').value = customerId;
        document.getElementById('editCustomerName').value = customerName;
        document.getElementById('editCurrentExtCode').value = extCode;
        document.getElementById('editGroupCode').value = extCode;
    });

    // Form submissions
    document.getElementById('createGroupForm').addEventListener('submit', async function (e) {
        e.preventDefault();

        const formData = new FormData(this);
        const data = {
            primary_customer_id: formData.get('primary_customer_id'),
            group_code: formData.get('group_code')
        };

        try {
            const response = await fetch('/customer/create-group', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();

            if (result.success) {
                showToast('Group created successfully!');
                bootstrap.Modal.getInstance(document.getElementById('addGroupModal')).hide();
                setTimeout(() => location.reload(), 1000);
            } else {
                showToast(result.message, false);
            }
        } catch (error) {
            console.error('Error:', error);
            showToast('Error creating group', false);
        }
    });

    document.getElementById('addToGroupForm').addEventListener('submit', async function (e) {
        e.preventDefault();

        const formData = new FormData(this);
        const data = {
            customer_id: formData.get('customer_id'),
            primary_code: formData.get('primary_code')
        };

        try {
            const response = await fetch('/customer/add-to-group', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();

            if (result.success) {
                showToast('Customer added to group successfully!');
                bootstrap.Modal.getInstance(document.getElementById('addToGroupModal')).hide();
                setTimeout(() => location.reload(), 1000);
            } else {
                showToast(result.message, false);
            }
        } catch (error) {
            console.error('Error:', error);
            showToast('Error adding customer to group', false);
        }
    });

    document.getElementById('makePrimaryForm').addEventListener('submit', async function (e) {
        e.preventDefault();

        const formData = new FormData(this);
        const data = {
            customer_id: formData.get('customer_id'),
            group_code: formData.get('group_code')
        };

        try {
            const response = await fetch('/customer/make-primary', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();

            if (result.success) {
                showToast('Customer made primary successfully!');
                bootstrap.Modal.getInstance(document.getElementById('makePrimaryModal')).hide();
                setTimeout(() => location.reload(), 1000);
            } else {
                showToast(result.message, false);
            }
        } catch (error) {
            console.error('Error:', error);
            showToast('Error making customer primary', false);
        }
    });

    document.getElementById('editGroupForm').addEventListener('submit', async function (e) {
        e.preventDefault();

        const formData = new FormData(this);
        const data = {
            customer_id: formData.get('customer_id'),
            group_code: formData.get('group_code')
        };

        try {
            const response = await fetch('/customer/update-group', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();

            if (result.success) {
                showToast('Group updated successfully!');
                bootstrap.Modal.getInstance(document.getElementById('editGroupModal')).hide();
                setTimeout(() => location.reload(), 1000);
            } else {
                showToast(result.message, false);
            }
        } catch (error) {
            console.error('Error:', error);
            showToast('Error updating group', false);
        }
    });

    // Remove from group
    document.addEventListener('click', function (e) {
        if (e.target.closest('.remove-from-group')) {
            const button = e.target.closest('.remove-from-group');
            const customerId = button.getAttribute('data-customer-id');

            if (confirm('Are you sure you want to remove this customer from the group?')) {
                removeFromGroup(customerId);
            }
        }

        if (e.target.closest('.remove-group')) {
            const button = e.target.closest('.remove-group');
            const customerId = button.getAttribute('data-customer-id');
            const customerName = button.getAttribute('data-customer-name');

            if (confirm(`Are you sure you want to remove the entire group for ${customerName}? This will unlink all secondary customers.`)) {
                removeGroup(customerId);
            }
        }
    });

    async function removeFromGroup(customerId) {
        try {
            const response = await fetch('/customer/remove-from-group', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ customer_id: customerId })
            });

            const result = await response.json();

            if (result.success) {
                showToast('Customer removed from group successfully!');
                setTimeout(() => location.reload(), 1000);
            } else {
                showToast(result.message, false);
            }
        } catch (error) {
            console.error('Error:', error);
            showToast('Error removing customer from group', false);
        }
    }

    async function removeGroup(customerId) {
        try {
            const response = await fetch('/customer/remove-group', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ customer_id: customerId })
            });

            const result = await response.json();

            if (result.success) {
                showToast('Group removed successfully!');
                setTimeout(() => location.reload(), 1000);
            } else {
                showToast(result.message, false);
            }
        } catch (error) {
            console.error('Error:', error);
            showToast('Error removing group', false);
        }
    }

</script>